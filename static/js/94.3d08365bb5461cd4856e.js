webpackJsonp([94,200],{563:function(n,t){n.exports={rawContent:'\n\n本文讨论如何使用python的`pytagcloud`模块制作中文标签云图片和html文件。\n\n如果你只是为了搜索到如何用python制作中文标签云，请跳过缘起和爬取文本数据部分从`标签云部分`看起：\n\n## 缘起\n\n1. 学习scrapy，顺便就拿byr做了实验，异步强大的吞吐能力看的目瞪口呆。看到scrapy官网说到scrapy就是抽取网页中的元数据用以数据分析等作用，想了想就做做版面标签云分析吧。\n2. 另一方面，R语言课上老师讲到文本分析，R语言那些包对中文的支持真是不错。为什么Python没有支持中文的包呢？我试着搜索了下，都是提问如何使用的而没有任何具体解决方案。不由得感慨还是R的社区在文本分析领域活跃。\n\n## 爬取文本数据\n\n首先要获取生成标签云的原始数据。什么都行，直接拿篇中文文章都可以，不过我这里是爬取byr论坛某些板块的标题数据。\n\nscrapy从网页抽取数据的能力相当强大，我在这里第一次体验到了xpath的方便之处，从此，即使是一些简单的网页任务也会用lxml来使用xpath。\n\n在firebug里简单分析下，然后一页一页地请求网页然后抽取标题。再合成一个单独的文本。\n\n## 标签云部分\n\n需要以下先决条件：\n\n- 确保安装pytagcloud，pip会顺便帮你帮它的依赖都装上\n\n        pip install --user pytagcloud\n\n- 准备一个中文字体文件比如`simhei.ttf`\n\n- 安装中文分词模块jieba\n\n        pip install --user jieba\n\n然后，为了生成中文标签云，我们要分几步：\n\n首先，把你的文本进行分词，并生成一个以单词为键以单词出现频数为值的字典。顺便去掉没有意义的词语比如“的”，“一个”这种。\n\n    wg = jieba.cut(YOUR_TEXT, cut_all=True)\n    wd = {}\n    nonsense = [u"一下", u"什么", u"一个"]\n    for w in wg:\n        if len(w) < 2:\n            continue\n        elif w in nonsense:\n            continue\n        try:\n            str(w)\n            continue\n        except:\n            if w not in wd:\n                wd[w] = 1\n            else:\n                wd[w] += 1\n\n其次，如果字典太大pytagcloud会报错：\n\n    IOError: unable to read font file \'/home/reverland/.local/lib64/python2.7/site-packages/pytagcloud/fonts/simhei.ttf\'\n\n另外，一个标签云图片上也不需要太多词语。所以我们对词语出现频数排序，然后选取前50\n\n    from operator import itemgetter\n    swd = sorted(wd.iteritems(), key=itemgetter(1), reverse=True)\n    swd = swd[1:50]\n\n接下来就可以参见pytagcloud再github主页上说明生成tag数据：\n\n    tags = make_tags(swd,\n                     minsize=SIZE1,\n                     maxsize=SIZE2,\n                     colors=random.choice(COLOR_SCHEMES.values()))\n\n但此时pytagcloud还不支持中文字体，我们需要添加一个中文字体。\n\n然后把你准备好的中文字体文件`simhei.ttf`移动到`~/.local/lib64/python2.7/site-packages/pytagcloud/fonts/`下，并更改其下的`fonts.json`文件，比如在头部添加一条记录：\n\n    [\n    \t{\n    \t\t"name": "SimHei",\n    \t\t"ttf": "simhei.ttf",\n    \t\t"web": "none"\n    \t},\n    ......\n\n现在，生成标签云png图像：\n\n    create_tag_image(tags,\n                     \'tag_cloud.png\',\n                     background=(0, 0, 0, 255),\n                     size=(900, 600),\n                     fontname="SimHei")\n\n你将在当前目录下发现一个名为`tag_cloud.png`的标签云图片：\n\n![byr论坛WorkLife版热词标签云](/images/tagcloud/tagcloud_png.png)\n\n注意：参数SIZE1和SIZE2可能需要反复试验才能找到合适的。\n\n现在，继续讨论如何生成html格式的标签云，html格式的标签云不会出现图片中有横有竖的情况。更多细节参看pytagcloud在github上的源码中测试文件。\n\n在我们已经通过`make_tags`生成标签数据之后，生成html数据：\n\n    data = create_html_data(tags,\n                            size=(900, 600),\n                            layout=3,\n                            fontname="SimHei",\n                            rectangular=False)\n\n还要准备个模板文件来生成html文件，比如`template.html`,关键别忘了指定语言和编码让浏览器能正常识别:\n\n    <html lang="zh_CN">\n        <head>\n            <meta charset="UTF-8">\n            <title>PyTagCloud</title>\n            <style type="text/css">\n                body{\n                    background-color: black;\n                }\n    \n                a.tag{\n                    font-family: \'SimHei\', \'Sans\';\n                    text-decoration: none;\n                }\n    \n                li.cnt{\n                    overflow: hidden;\n                    position: absolute;\n                    display: block;\n                }\n    \n                ul.cloud{\n                    position: relative;\n                    display: block;\n                    width: ${width}px;\n                    height: ${height}px;\n                    overflow: hidden;\n                    margin: 0;\n                    padding: 0;\n                    list-style: none;\n                }\n                $css\n            </style>\n        </head>\n        <body>\n            <ul class="cloud">\n                $tags\n            </ul>\n        </body>\n    </html>\n\n将其读入并转化为模板\n\n    from string import Template\n    with open(template_filename) as f:\n        html_template = Template(f.read())\n\n准备填充进去内容的字典：\n\n    context = {}\n    tags_template = \'<li class="cnt" style="top: %(top)dpx; left: %(left)dpx; \\\n        height: %(height)dpx;"><a class="tag \\\n        %(cls)s" href="#%(tag)s" style="top: %(top)dpx;\\\n            left: %(left)dpx; font-size: %(size)dpx; height: %(height)dpx; \\\n        line-height:%(lh)dpx;">%(tag)s</a></li>\'\n    context[\'tags\'] = \'\'.join([tags_template % link for link in data[\'links\']])\n    context[\'width\'] = data[\'size\'][0]\n    context[\'height\'] = data[\'size\'][1]\n    context[\'css\'] = "".join("a.%(cname)s{color:%(normal)s;}\\\n                             a.%(cname)s:hover{color:%(hover)s;}" %\n                             {\'cname\': k,\n                              \'normal\': v[0],\n                              \'hover\': v[1]}\n                             for k, v in data[\'css\'].items())\n\n得到要生成的html文件并写入：\n\n    html_text = html_template.substitute(context)\n        with open(\'tagcloud.html\', \'w\') as html_file:\n            html_file.write(html_text.encode(\'utf-8\'))\n\n在当前目录你会得到一个名为`tagcloud.html`的文件，用浏览器打开如下：\n\n![html标签云](/images/tagcloud/tagcloud_html.png)\n\n<iframe src="/tagcloud_zh.html" height="500px" width="100%"></iframe>\n\nThat\'s all. 有兴趣的同学可以自行封装以便自己使用。\n\n## 可能永远不会实现的碎碎念\n\n    大概不会有机会了\n    2014.1.29\n\n利用热度和标题正文数据可以分析下什么样的帖子更容易被回复，试着用bayes方法看看。可以做做内容聚类，主题模型分析。\n\n想起github上一本叫 _Bayes Probablistic Programming for Hackers_ .不知道有空看没\n',metaData:{layout:"post",title:"Python中文标签云之pytagcloud",excerpt:"简单毫无技术含量的热词分析,如果这算数据挖掘的话。唯一值的欣慰的是可以让pytagcloud支持中文标签云了。",category:"python",tags:["python"],disqus:!0,status:"draft"}}}});