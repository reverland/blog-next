webpackJsonp([121,192],{332:function(n,t){n.exports={rawContent:"\n\n# Python小练习：追踪导弹仿真\n\n警告：浏览器可能不支持html嵌入标签，那么很抱歉什么视频也看不到。建议使用最新稳定版的firefox/chromium\n\n仿真的时候面向对象会很方便。\n\n## 缘起\n\n某天终于没有雾霾的时候，我在操场上追赶正在散步的父亲……然后，我就想多了= =跟踪导弹是个什么轨迹呢？\n\n![操场示意图](https://lhtlyybox.googlecode.com/files/playground.png)\n\n## 仿真\n\n首先把问题简化下，如果从圆心开始追赶圆上匀速运动的物体，是什么情况。\n\n我先自己设法用微分笔算了算，发现实在搞不定。\n\n上网查查导弹问题看到一些简单的直线问题，都涉及一堆微分方程和欧拉法迭代啥的……\n\n干脆自己仿真下吧。这是最初的版本，完全没有面向对象概念。\n\n前半部分调整图像的代码完全可以不看，从while循环开始即可。\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\ntolerance = 1e-1\nradius = np.pi\nv_o = 20\nx_o, y_o = 0, radius\n\nx_m, y_m = -radius, 0\nv_m = 5\n\nplt.figure(figsize=(10, 10), dpi=80)\nplt.title(\" missile flight simulator \", fontsize=40)\nplt.xlim(-4, 4)\nplt.ylim(-4, 4)\n#plt.xticks([])\n#plt.yticks([])\n\n# set spines\nax = plt.gca()\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\nax.xaxis.set_ticks_position('bottom')\nax.spines['bottom'].set_position(('data', 0))\nax.yaxis.set_ticks_position('left')\nax.spines['left'].set_position(('data', 0))\nplt.xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi], [r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$', r'$+\\pi$'])\nplt.yticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi], [r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$', r'$+\\pi$'])\n\n# Note object and missile\nplt.annotate('object start point', xy=(x_o, y_o),  xycoords='data',\n             xytext=(+15, +15), textcoords='offset points', fontsize=12,\n             arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3,rad=.2\"))\nplt.annotate('missile start point', xy=(x_m, y_m),  xycoords='data',\n             xytext=(+15, +15), textcoords='offset points', fontsize=12,\n             arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3,rad=.2\"))\n\n# alpha labels\nfor label in ax.get_xticklabels() + ax.get_yticklabels():\n    label.set_fontsize(16)\n    label.set_bbox(dict(facecolor='white', edgecolor='None', alpha=0.65))\n\n\nwhile True:\n    if x_o == 0 and y_o == radius:\n        beta = 0\n    elif x_o == 0 and y_o == radius:\n        beta = np.pi\n    elif x_o < 0:\n        beta = np.pi / 2 * 3 - np.arctan(y_o / x_o)\n    else:\n        beta = np.pi / 2 - np.arctan(y_o / x_o)\n    if np.sqrt((x_o - x_m) ** 2 + (y_o - y_m) ** 2) < tolerance:\n        print \"collision\"\n        plt.plot(x_m, y_m, 'o')\n        plt.annotate('crash point', xy=(x_m, y_m),  xycoords='data',\n                     xytext=(+15, +15), textcoords='offset points', fontsize=12,\n                     arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3,rad=.2\"))\n        plt.pause(0.1)\n        break\n    elif x_o < x_m:\n        alpha = np.pi + np.arctan((y_o - y_m) / (x_o - x_m))\n    elif x_o == x_m:\n        alpha = np.pi / 2\n    else:\n        alpha = np.arctan((y_o - y_m) / (x_o - x_m))\n    x_o = radius * np.sin(beta + v_o * 0.01 / np.pi / 2)\n    y_o = radius * np.cos(beta + v_o * 0.01 / np.pi / 2)\n    x_m = x_m + v_m * 0.01 * np.cos(alpha)\n    y_m = y_m + v_m * 0.01 * np.sin(alpha)\n    #print alpha, beta\n    plt.plot(x_o, y_o, 'r.', alpha=.5)\n    plt.plot(x_m, y_m, 'bx', alpha=.5)\n    plt.legend((\"target\", \"missile\"), loc=\"upper left\", prop={'size': 12})\n    plt.pause(0.1)\n\n```\n\n<video width=\"600\" height=\"400\" controls>\n演示一，追不上\n  <source src=\"https://lhtlyybox.googlecode.com/files/%E8%BF%BD%E4%B8%8D%E4%B8%8A.ogv\" type='video/ogg; codecs=\"theora, vorbis\"'>\n  </video>\n\n我发现如果我速度够慢，未必追得上，甚至连被追踪物的轨道都不会进入……这挺出乎意料的，本来以为一定追的上\n\n回到最初的问题，我从我的位置上追我父亲（好傻，都不知道估计下位置……）\n\n<video width=\"600\" height=\"400\" controls>\n初始问题演示\n  <source src=\"https://lhtlyybox.googlecode.com/files/%E5%88%9D%E5%A7%8B%E9%97%AE%E9%A2%98.ogv\" type='video/ogg; codecs=\"theora, vorbis\"'>\n</video>\n\n## 面向对象\n\n问题来了，如果我要仿真不只一个追踪导弹，比如还想仿真一个拦截导弹呢？\n\n拦截失败演示\n\n<video width=\"600\" height=\"400\" controls>\n拦截失败问题演示\n  <source src=\"https://lhtlyybox.googlecode.com/files/%E6%8B%A6%E6%88%AA%E5%A4%B1%E8%B4%A5.ogv\" type='video/ogg; codecs=\"theora, vorbis\"'>\n</video>\n\n还可以用上面的方法不断扩充代码，每个对象写重复的代码。\n\n但这时面向对象就能发挥威力，减少代码重用了。\n\n以下是对[四蜗牛聚合线](http://203.208.46.176/url?sa=t&rct=j&q=%E4%BB%8E%E8%9C%97%E7%89%9B%E8%BF%90%E5%8A%A8%E5%88%B0%E5%AF%BC%E5%BC%B9%E8%B7%9F%E8%B8%AA%E8%BD%A8%E8%BF%B9:++%E5%85%B3%E4%BA%8E++%E2%80%9C%E8%81%9A%E5%90%88%E7%BA%BF%E2%80%9D+%E4%B8%8E%E2%80%9C%E8%BF%BD%E8%B8%AA%E7%BA%BF%E2%80%9D%E7%9A%84%E5%88%9D%E6%8E%A2&source=web&cd=1&cad=rja&ved=0CCgQFjAA&url=%68%74%74%70%3a%2f%2f%77%77%77%2e%79%61%75%2d%61%77%61%72%64%73%2e%6f%72%67%2f%70%61%70%65%72%2f%53%2fe%70%64%66&ei=BdIyUd6jAsiwiQecyoDIBA&usg=AFQjCNFCz242tDRfrkyFVjtJUl4iP98nug&bvm=bv.43148975,d.aGc)问题的仿真。\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\ntolerance = 1e-1\nradius = np.pi\n\n# missile 1\nx_m1, y_m1 = -np.pi, 0\nv_m1 = 5\n\n# missile 2\nx_m2, y_m2 = 0, np.pi\nv_m2 = v_m1\n# missile 3\nx_m3, y_m3 = np.pi, 0\nv_m3 = v_m1\n# missile 4\nx_m4, y_m4 = 0, -np.pi\nv_m4 = v_m1\n\nplt.figure(figsize=(10, 10), dpi=80)\nplt.title(\" missile flight simulator \", fontsize=40)\nplt.xlim(-4, 4)\nplt.ylim(-4, 4)\n#plt.xticks([])\n#plt.yticks([])\n\n# set spines\nax = plt.gca()\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\nax.xaxis.set_ticks_position('bottom')\nax.spines['bottom'].set_position(('data', 0))\nax.yaxis.set_ticks_position('left')\nax.spines['left'].set_position(('data', 0))\nplt.xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi], [r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$', r'$+\\pi$'])\nplt.yticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi], [r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$', r'$+\\pi$'])\n\nplt.annotate('missile start point', xy=(x_m1, y_m1),  xycoords='data',\n             xytext=(+15, +15), textcoords='offset points', fontsize=12,\n             arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3,rad=.2\"))\n\n# alpha labels\nfor label in ax.get_xticklabels() + ax.get_yticklabels():\n    label.set_fontsize(16)\n    label.set_bbox(dict(facecolor='white', edgecolor='None', alpha=0.65))\n\n\nclass ob(object):\n    \"\"\"docstring for ob\"\"\"\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nclass missile(ob):\n    \"\"\"docstring for missile\"\"\"\n    def __init__(self, x, y):\n        super(missile, self).__init__(x, y)\n\n    def forward(self, v, target):\n        \"\"\"docstring for forward\"\"\"\n        if self.x < target.x:\n            alpha = np.arctan((target.y - self.y) / (target.x - self.x))\n        elif self.x > target.x:\n            alpha = np.pi + np.arctan((target.y - self.y) / (target.x - self.x))\n        elif self.x == target.x and self.y < target.y:\n            alpha = np.pi / 2\n        else:\n            alpha = -np.pi / 2\n        self.x = self.x + v * 0.01 * np.cos(alpha)\n        self.y = self.y + v * 0.01 * np.sin(alpha)\n        return self.x, self.y\n\n    def distance(self, target):\n        \"\"\"docstring for distance\"\"\"\n        return np.sqrt((self.x - target.x) ** 2 + (self.y - target.y) ** 2)\n\n\nclass target(ob):\n    \"\"\"docstring for target\"\"\"\n    def __init__(self, x, y):\n        super(target, self).__init__(x, y)\n\n    def newposition(self, x, y):\n        \"\"\"docstring for newposition\"\"\"\n        self.x = x\n        self.y = y\n\nm1 = missile(x_m1, y_m1)\nm2 = missile(x_m2, y_m2)\nm3 = missile(x_m3, y_m3)\nm4 = missile(x_m4, y_m4)\n\nwhile True:\n    if m1.distance(m2) < tolerance or m1.distance(m3) < tolerance or m1.distance(m4) < tolerance:\n        print \"collision\"\n        plt.plot(x_m1, y_m1, 'o')\n        plt.annotate('crash point', xy=(x_m1, y_m1),  xycoords='data',\n                     xytext=(+15, +15), textcoords='offset points', fontsize=12,\n                     arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3,rad=.2\"))\n        plt.pause(0.1)\n        plt.show()\n        break\n    elif m3.distance(m2) < tolerance or m3.distance(m4) < tolerance:\n        print \"collision\"\n        plt.plot(x_m3, y_m3, 'o')\n        plt.annotate('crash point', xy=(x_m3, y_m3),  xycoords='data',\n                     xytext=(+15, +15), textcoords='offset points', fontsize=12,\n                     arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3,rad=.2\"))\n        plt.pause(0.1)\n        plt.show\n        break\n    x_m1, y_m1 = m1.forward(v_m1, m2)\n    x_m2, y_m2 = m2.forward(v_m2, m3)\n    x_m3, y_m3 = m3.forward(v_m3, m4)\n    x_m4, y_m4 = m4.forward(v_m4, m1)\n    #print alpha, beta\n    plt.plot(x_m1, y_m1, 'bx', alpha=.5)\n    plt.plot(x_m2, y_m2, 'k*', alpha=.5)\n    plt.plot(x_m3, y_m3, 'r.', alpha=.5)\n    plt.plot(x_m4, y_m4, 'gp', alpha=.5)\n    plt.legend((\"missile1\", \"missile2\", \"missile3\", \"missile4\"), loc=\"upper left\", prop={'size': 12})\n    plt.pause(0.1)\n\n```\n\n<video width=\"600\" height=\"400\" controls>\n  四只蜗牛聚合线演示\n  <source src=\"https://lhtlyybox.googlecode.com/files/%E8%9C%97%E7%89%9B%E8%81%9A%E5%90%88%E7%BA%BF.ogv\" type='video/ogg; codecs=\"theora, vorbis\"'>\n  </video>\n\n## 总结\n\n面向对象方法对仿真问题非常合适，能有效简化代码，做到DRY(Don't repeat yourself)。\n\n搞着玩的，也许我该想想复试怎么办了……\n",metaData:{layout:"post",title:"Python小练习:追踪导弹仿真",excerpt:"Just for fun",category:"python",tags:["python"],disqus:!0}}}});