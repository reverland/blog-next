webpackJsonp([51,200],{606:function(n,e){n.exports={rawContent:"\n\n动态载入有好几个问题：\n\n- 需要时间载入，每次引用都要重定位\n- 让`.text`区域不能共享，浪费了RAM空间\n- `.text`必须能写入带来安全问题\n\nPIC能解决这些问题：\n\nPIC背后的思想很简单，为代码中的全局数据和函数引用外加一层重定向。通过利用链接和加载过程，可能让共享库中的`text`部分完全位置无关。它可以被映射到不同的内存地址无需修改。\n\n## 洞见1：text和data段之间的偏移\n\nPIC依赖于数据段和代码段之间的偏移，这些数据在链接时就被链接器知道了。当链接结合几个目标文件时，链接器手机不同目标文件的各个段然后合成一个。因此，链接器知道段的尺寸相对位置。\n\n比如说数据段紧接着代码段，在代码段中引用数据段中某个数据的相对地址就能通过简单的计算得到。当前代码在代码段中的偏移已知，代码段基址与数据段之间的偏移已知，调用的相对地址就是两者之差。\n\n    (地址由低到高，位置都是已知的)\n    text基址\n    ...\n    某需要相对引用指令-------\\\n    ...                       |\n    data基址                  |相对地址\n    ...                       |\n    被引用的数据      -------/\n    ...\n\n## 洞见2：基于程序指针的取址\n\nx86没有对eip操作的指令，不能通过程序指针取地址，但x64可以啊\n\nx86很多指令需要绝对地址，通过相对与程序指针取址可以得到。\n\n很多shellcode用这个获取程序指针：\n\n    call something\n    something：\n        pop ebx\n\n`ebx`中现在就是程序指针的值了\n\n## 数据索引\n\n### 全局偏移表(GOT)\n\n面试被问及这个怎么组织的？我不是很明白什么意思。早年曾经就跟着这篇文章打开gdb很好奇的看got/plt是怎么回事。\n\n通过以上两个洞见，在x86上实现PIC也是可能的。通过GOT完成。\n\nGOT就是一个地址表，在数据段中。当一个代码段中的指令想引用某个变量，不是直接通过绝对地址(需要重定位),而是引用GOT中的条目。显然GOT的地址确定，GOT的条目则将保存变量的绝对地址。\n\n![got](http://eli.thegreenplace.net/images/2011/code_data_got_1.png)\n\nGOT中的条目还是得重定位= =，但相对于载入时重定位，有两个好处\n\n- 重定位每个变量只重定位一次\n- 数据段是可写的，不被进程共享。添加重定位没什么影响。将重定位从代码段移过来，让代码段只读并且在进程间可以共享。\n\n### 一个例子\n\n`ml_main_pic.c`\n\n```c\nint myglob = 42;\n\nint ml_util_func(int a)\n{\n    return a + 1;\n}\n\nint ml_func(int a, int b)\n{\n    int c = b + ml_util_func(a);\n    myglob += c;\n    return b + myglob;\n}\n```\n\n编译为PIC的动态库\n\n     ~/Work/project/blackhat/eli  gcc -fPIC -m32 -g -shared ml_main_pic.c -o libmlpic.so\n\n反汇编\n\n     ~/Work/project/blackhat/eli  objdump -d -Mintel libmlpic_dataonly.so   \n    \n    libmlpic_dataonly.so:     file format elf32-i386\n    ...\n    0000053c <ml_func>:\n     53c:   55                      push   ebp\n     53d:   89 e5                   mov    ebp,esp\n     53f:   e8 1a 00 00 00          call   55e <__x86.get_pc_thunk.cx>\n     544:   81 c1 bc 1a 00 00       add    ecx,0x1abc\n     54a:   8b 81 ec ff ff ff       mov    eax,DWORD PTR [ecx-0x14]\n     550:   8b 10                   mov    edx,DWORD PTR [eax]\n     552:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n     555:   01 c2                   add    edx,eax\n     557:   8b 45 0c                mov    eax,DWORD PTR [ebp+0xc]\n     55a:   01 d0                   add    eax,edx\n     55c:   5d                      pop    ebp\n     55d:   c3                      ret    \n    \n    0000055e <__x86.get_pc_thunk.cx>:\n     55e:   8b 0c 24                mov    ecx,DWORD PTR [esp]\n     561:   c3                      ret    \n     562:   66 90                   xchg   ax,ax\n\n53f是获取程序指针的方法，把程序指针放到`ecx`中。\n\n在544后，`ecx`就持有GOT的地址。\n\n54a后，将`myglob`在GOT中的的绝对地址放入`eax`\n\n550后，`myglob`的值被置入`edx`\n\n然后就是简单的加上`a`和`b`。\n\n通过readelf可以查看共享库文件中GOT节信息\n\n     ~/Work/project/blackhat/eli  readelf -S libmlpic_dataonly.so \n    There are 33 section headers, starting at offset 0x1320:\n    \n    Section Headers:\n      [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n      ...\n      [19] .got              PROGBITS        00001fe8 000fe8 000018 04  WA  0   0  4\n      [20] .got.plt          PROGBITS        00002000 001000 000014 04  WA  0   0  4\n      ...\n    Key to Flags:\n      W (write), A (alloc), X (execute), M (merge), S (strings)\n      I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)\n      O (extra OS processing required) o (OS specific), p (processor specific)\n\n我们算算ELF中写的和编译器做的是否符合。\n\n    0x544+0x1abc=0x2000\n\n正好是`.got.plt`节的虚拟地址。再计算下myglob地址在GOT中的位置\n\n    0x2000-0x14=0x1fec\n\n我们看看ELF文件中的信息:\n\n     ~/Work/project/blackhat/eli  readelf -r libmlpic_dataonly.so\n    \n    Relocation section '.rel.dyn' at offset 0x358 contains 9 entries:\n     Offset     Info    Type            Sym.Value  Sym. Name\n     ...\n    00001fec  00000606 R_386_GLOB_DAT    00002018   myglob\n    ...\n\n正好，这里有个重定位。这个重定位就是让链接器把符号地址直接放到这里。\n\n通过gdb看看：\n\n     ~/Work/project/blackhat/eli  gcc -m32 -o driver driver.o -L. -lmlpic_dataonly\n     ~/Work/project/blackhat/eli  gdb -q driver \n    Reading symbols from /home/lyy/Work/project/blackhat/eli/driver...done.\n    (gdb)  break ml_func\n    Breakpoint 1 at 0x80484c0\n    (gdb) r\n    Starting program: /home/lyy/Work/project/blackhat/eli/driver \n    warning: the debug information found in \"/usr/lib64/debug/lib64/ld-2.17.so.debug\" does not match \"/lib/ld-linux.so.2\" (CRC mismatch).\n    \n    addr myglob = 0x804a024\n    \n    Breakpoint 1, ml_func (a=1, b=1) at ml_main_pic.c:5\n    5           return myglob + a + b;\n    (gdb) disas ml_func\n    Dump of assembler code for function ml_func:\n       0xf7fd853c <+0>:     push   ebp\n       0xf7fd853d <+1>:     mov    ebp,esp\n       0xf7fd853f <+3>:     call   0xf7fd855e <__x86.get_pc_thunk.cx>\n       0xf7fd8544 <+8>:     add    ecx,0x1abc\n    => 0xf7fd854a <+14>:    mov    eax,DWORD PTR [ecx-0x14]\n       0xf7fd8550 <+20>:    mov    edx,DWORD PTR [eax]\n       0xf7fd8552 <+22>:    mov    eax,DWORD PTR [ebp+0x8]\n       0xf7fd8555 <+25>:    add    edx,eax\n       0xf7fd8557 <+27>:    mov    eax,DWORD PTR [ebp+0xc]\n       0xf7fd855a <+30>:    add    eax,edx\n       0xf7fd855c <+32>:    pop    ebp\n       0xf7fd855d <+33>:    ret    \n    End of assembler dump.\n    (gdb) i registers \n    eax            0x1      1\n    ecx            0xf7fda000       -134373376\n    ...\n    (gdb) p/x 0xf7fda000-0x14 # GOT中glob绝对地址地址\n    $2 = 0xf7fd9fec\n    (gdb) x/x 0xf7fd9fec\n    0xf7fd9fec:     0x0804a024\n    (gdb) p &myglob \n    $4 = (int *) 0x804a024 <myglob>\n\n就是这样\n\n## 函数调用\n\n额，函数调用，阿里电面时问我GOT干什么的，我说解析函数的吧。。。。。。(就是因为当年看得这篇留下的残缺印象)，当时为什么看这篇文章呢？因为发现函数调用竟然都不是直接调用的！！！\n\n函数不是像数据这样简单的引用的。\n\n### 惰性绑定优化\n\n共享库引用一个函数时，函数地址在载入时才能确定。解析这个地址的过程叫做绑定(binding)。这就是动态载入器把共享库载入进程内存空间时所做的。这个绑定过程不简单，载入器不得不通过在特殊的表中查找函数符号来实现。(共享库ELF目标文件确实有以此为目的的特殊的哈希表节)\n\n解析函数花时间，一般函数比全局变量多太多了，更何况很多函数可能根本不会被调用(比如错误处理或特殊情况)。\n\n为了加速函数绑定的过程，智能惰性绑定机制被设计出来。所谓惰性就是在需要的时候再做什么，计算机科学中很多应用比如[惰性求值](http://en.wikipedia.org/wiki/Copy-on-write)和[copy-on-write](http://en.wikipedia.org/wiki/Lazy_evaluation)\n\n惰性绑定机制通过又一层重定向实现——PLT.\n\n### 过程链接表(PLT)\n\nPLT是可执行的`.text`一部分，包含一系列条目(每个条目对应一个共享库调用的外部函数)\n\n每个PLT条目都是段简短的可执行代码。\n\n代码调用PLT中的条目而不是直接调用函数，PLT中条目负责真正调用函数。\n\n这个设计被成为蹦床('trampoline')[^1]，每个PLT条目对应也在GOT中一个包含函数实际偏移的条目，但仅仅动态载入器解析它后才会对应上。\n\nPLT允许惰性解析，当共享库首次被载入后，函数调用还没被解析：\n\n![调用时的解析过程](http://eli.thegreenplace.net/images/2011/plt_before.png)\n\n一点解说：PLT的第一个条目调用解析程序，该程序在动态链接器里(每个都有)。这个程序将把函数的实际地址解析。\n\n#### 第一次\n\n于是乎，当func第一次被调用时，调用`PLT[n]`的例程，接着根据`GOT[n]`中的内容跳到准备解析的指令，接着调用解析器，解析器会把func函数的实际地址写入`GOT[n]`然后调用`func`。\n\n#### 第二次\n\n![事情不再相同](http://eli.thegreenplace.net/images/2011/plt_after.png)\n\n这时候`GOT[n]`中已经有函数实际地址，从PLT条目直接就跳到函数func的实际代码开始执行。\n\n不再需要解析器，只有一层多余的跳转。这样实际不用的函数永远不用被解析。\n\n同时，这个设计实现了库中代码段完全位置无关。只有GOT中使用了绝对地址，而GOT在数据段中并且会被动态载入器重定位。即使PLT自身都是PIC的，能放到只读的代码段中。\n\n解析器只是一段载入器里的程序，PLT条目中准备的参数，何时的重定向条目帮助它知道需要解析的符号和需要更新的GOT条目。\n\n### 通过PLT和GOT实现的PIC函数调用——实例\n\n费曼说：What I can not create, I do not understand. 我们自己亲手做做\n\n     ~/Work/project/blackhat/eli  cat ml_main_pic.c\n    int myglob = 42;\n    \n    int ml_util_func(int a)\n    {\n        return a + 1;\n    }\n    \n    int ml_func(int a, int b)\n    {\n        int c = b + ml_util_func(a);\n        myglob += c;\n        return b + myglob;\n    }\n    \n     ~/Work/project/blackhat/eli  gcc -fPIC -m32 -g -shared ml_main_pic.c -o libmlpic.so\n    \n     ~/Work/project/blackhat/eli  objdump -d -Mintel libmlpic.so \n    \n    libmlpic.so:     file format elf32-i386\n    ...\n    00000440 <ml_util_func@plt>:\n     440:   ff a3 14 00 00 00       jmp    DWORD PTR [ebx+0x14]\n     446:   68 10 00 00 00          push   0x10\n     44b:   e9 c0 ff ff ff          jmp    410 <_init+0x30>\n    ...\n    0000057c <ml_util_func>:\n     57c:   55                      push   ebp\n     57d:   89 e5                   mov    ebp,esp\n     57f:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n     582:   83 c0 01                add    eax,0x1\n     585:   5d                      pop    ebp\n     586:   c3                      ret    \n    \n    00000587 <ml_func>:\n     587:   55                      push   ebp\n     588:   89 e5                   mov    ebp,esp\n     58a:   53                      push   ebx\n     58b:   83 ec 24                sub    esp,0x24\n     58e:   e8 bd fe ff ff          call   450 <__x86.get_pc_thunk.bx>\n     593:   81 c3 6d 1a 00 00       add    ebx,0x1a6d\n     599:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n     59c:   89 04 24                mov    DWORD PTR [esp],eax\n     59f:   e8 9c fe ff ff          call   440 <ml_util_func@plt>\n     ...\n\n注意59f行的调用，这时`ebx`是`GOT`的基址(做减法寻址。。。好奇怪)。\n\n注意440行,PLT条目包含的三部分，一个指向GOT条目中指向的跳转，一个准备解析器参数，一个调用解析器。\n\n我们不在乎410的解析器(PLT[0])\n\n在593的时候获得了`eip`，接着被加上`0x1a6d`。GOT的基址就是这个了。\n\n    0x593+0x1a6d=0x2000\n\n可以用`readelf`看看\n\n     ~/Work/project/blackhat/eli  readelf -x .got.plt libmlpic.so \n    \n    Hex dump of section '.got.plt':\n      0x00002000 001f0000 00000000 00000000 26040000 ............&...\n      0x00002010 36040000 46040000                   6...F...\n\n条目`ml_util_func@plt`查看的GOT条目在`+0x14`位置，即`0x2014`,上图中可见是`0x446`\n\n正好是`ml_util_func@plt`中`push`那一行。\n\n为了让动态链接器能起作用，重定位条目也被添加来指定在GOT中的哪个位置重定位`ml_util_func`\n\n     ~/Work/project/blackhat/eli  readelf -r libmlpic.so\n    \n    Relocation section '.rel.dyn' at offset 0x380 contains 9 entries:\n     Offset     Info    Type            Sym.Value  Sym. Name\n    00001ef4  00000008 R_386_RELATIVE   \n    00001ef8  00000008 R_386_RELATIVE   \n    00002018  00000008 R_386_RELATIVE   \n    00001fe8  00000106 R_386_GLOB_DAT    00000000   _ITM_deregisterTMClone\n    00001fec  00000606 R_386_GLOB_DAT    0000201c   myglob\n    00001ff0  00000206 R_386_GLOB_DAT    00000000   __cxa_finalize\n    00001ff4  00000306 R_386_GLOB_DAT    00000000   __gmon_start__\n    00001ff8  00000406 R_386_GLOB_DAT    00000000   _Jv_RegisterClasses\n    00001ffc  00000506 R_386_GLOB_DAT    00000000   _ITM_registerTMCloneTa\n    \n    Relocation section '.rel.plt' at offset 0x3c8 contains 3 entries:\n     Offset     Info    Type            Sym.Value  Sym. Name\n    0000200c  00000207 R_386_JUMP_SLOT   00000000   __cxa_finalize\n    00002010  00000307 R_386_JUMP_SLOT   00000000   __gmon_start__\n    00002014  00000907 R_386_JUMP_SLOT   0000057c   ml_util_func\n\n最后一行很表示载入器应该把符号`ml_util_func`的地址放入`0x2014`中(这个函数的GOT条目)\n\n以上是在elf文件中。虽然\n\n我们在gdb中检查首次调用函数后GOT条目的更改：\n\n     ~/Work/project/blackhat/eli  gdb -q ./driver\n    Reading symbols from /home/lyy/Work/project/blackhat/eli/driver...done.\n    (gdb) b ml_func\n    Breakpoint 1 at 0x80484b0\n    (gdb) run\n    Starting program: /home/lyy/Work/project/blackhat/eli/./driver \n    warning: the debug information found in \"/usr/lib64/debug/lib64/ld-2.17.so.debug\" does not match \"/lib/ld-linux.so.2\" (CRC mismatch).\n    \n    addr myglob = 0x804a024\n    \n    Breakpoint 1, ml_func (a=1, b=1) at ml_main_pic.c:10\n    10          int c = b + ml_util_func(a);\n    (gdb) disas ml_func\n    Dump of assembler code for function ml_func:\n       0xf7fd8587 <+0>:     push   ebp\n       0xf7fd8588 <+1>:     mov    ebp,esp\n       0xf7fd858a <+3>:     push   ebx\n       0xf7fd858b <+4>:     sub    esp,0x24\n       0xf7fd858e <+7>:     call   0xf7fd8450 <__x86.get_pc_thunk.bx>\n       0xf7fd8593 <+12>:    add    ebx,0x1a6d\n    => 0xf7fd8599 <+18>:    mov    eax,DWORD PTR [ebp+0x8]\n       0xf7fd859c <+21>:    mov    DWORD PTR [esp],eax\n       0xf7fd859f <+24>:    call   0xf7fd8440 <ml_util_func@plt>\n       0xf7fd85a4 <+29>:    mov    edx,DWORD PTR [ebp+0xc]\n       0xf7fd85a7 <+32>:    add    eax,edx\n       0xf7fd85a9 <+34>:    mov    DWORD PTR [ebp-0xc],eax\n       0xf7fd85ac <+37>:    mov    eax,DWORD PTR [ebx-0x14]\n       0xf7fd85b2 <+43>:    mov    edx,DWORD PTR [eax]\n       0xf7fd85b4 <+45>:    mov    eax,DWORD PTR [ebp-0xc]\n       0xf7fd85b7 <+48>:    add    edx,eax\n       0xf7fd85b9 <+50>:    mov    eax,DWORD PTR [ebx-0x14]\n       0xf7fd85bf <+56>:    mov    DWORD PTR [eax],edx\n       0xf7fd85c1 <+58>:    mov    eax,DWORD PTR [ebx-0x14]\n       0xf7fd85c7 <+64>:    mov    edx,DWORD PTR [eax]\n       0xf7fd85c9 <+66>:    mov    eax,DWORD PTR [ebp+0xc]\n       0xf7fd85cc <+69>:    add    eax,edx\n       0xf7fd85ce <+71>:    add    esp,0x24\n    ---Type <return> to continue, or q <return> to quit---q\n    Quit\n    (gdb) i registers ebx   #GOT基址\n    ebx            0xf7fda000       -134373376\n    (gdb) x/x 0xf7fda000+0x14   # GOT中ml_util_func的地址\n    0xf7fda014:     0xf7fd8446  #和之前ELF文件中类似\n    (gdb) disas 0xf7fd8440  # ml_util_func@plt\n    Dump of assembler code for function ml_util_func@plt:\n       0xf7fd8440 <+0>:     jmp    DWORD PTR [ebx+0x14]\n       0xf7fd8446 <+6>:     push   0x10\n       0xf7fd844b <+11>:    jmp    0xf7fd8410\n    End of assembler dump.\n\n调用一次：\n\n    (gdb) n\n    11          myglob += c;\n    (gdb) x/x 0xf7fda000+0x14\n    0xf7fda014:     0xf7fd857c\n    (gdb) p &ml_util_func\n    $1 = (int (*)(int)) 0xf7fd857c <ml_util_func>\n\n可见GOT条目已经被更改。\n\n## 通过环境变量控制载入解析\n\n通过`LD_BIND_NOW`和`LD_BIND_NOT`来定义加载方式。\n\n    man ld.so\n\n### PIC的代价\n\n- 所有PIC中外部数据代码引用都需要额外的重定向，需要更多的内存。\n- 在x86平台上多占用了一个通用寄存器，结果就需要更多内存引用。\n\n### 结论\n\nx64的好像作者没有写了。。。。。。。\n\nx64平台上，因为能相对`rip`寻址，不需要通过某种方式获取程序指针。\n\n关于`.got`和`.got.plt`提下，就是为了区分数据和函数引用，一个从GOT基址负引用`ebx-0x14`一个正引用`ebx+0x14`。这个设计= =\n\nFootnotes\n---------\n[^1]: 这让我想起了函数式编程的一种优化递归设计。\n",metaData:{layout:"post",title:"Position Independent Code (PIC) in shared libraries",excerpt:"some notes and some translations",category:"linux",tags:["linux"],disqus:!0}}}});