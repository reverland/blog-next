webpackJsonp([139,201],{520:function(n,e){n.exports={rawContent:'\n\n翻译自：[Dead easy yet powerful static website generator with Flask](https://nicolas.perriault.net/code/2012/dead-easy-yet-powerful-static-website-generator-with-flask/)\n\n纯意译……以下是正文，和jekyll很像的感觉，哈？34行代码完成一个静态站点生成器。\n\n----\n\n我想将我的在线身份统合到一个单独的托管地方很久了，因此有了你现在浏览的这个网站。我也寻找一个静态网站架构有段时间了，尝试了许多但一个也不中意。这真令人沮丧。\n\n然后遇到[Armin Ronacher的这个tweet](https://twitter.com/#!/mitsuhiko/statuses/166570613295689728)：\n\n<blockquote class="twitter-tweet tw-align-center">\n    <p>Frozen-Flask is really, really useful. Should have used that earlier.</p>&mdash; Armin Ronacher (@mitsuhiko) <a href="https://twitter.com/mitsuhiko/status/166570613295689728" data-datetime="2012-02-06T17:15:03+00:00">February 6, 2012</a>\n</blockquote>\n\n[Armin](http://lucumr.pocoo.org/)是[Flask](http://flask.pocoo.org/)这个Python微框架的作者，我喜欢flask的简洁。所以这个tweet一个机灵，我便开始探索[Frozen-Flask](http://packages.python.org/Frozen-Flask/)的玩法。\n\nFrozen-Flask将Flask应用_冻结_成静态文件，这样你能够高速而无痛地部署它们。再佐以[Flask-FlatPages](http://packages.python.org/Flask-FlatPages/)，你获得了完美的生成静态站点工具集，这个站点将有所以你使用框架能得到的特性。\n\n- 酷的urls和简单的路径管理\n- 强大的模板\n- 本地动态服务\n- 静态版本管理\n\n## 第一轮：项目搭建\n\n在新文件夹中创建个新的[virtualenv](http://pypi.python.org/pypi/virtualenv)，使用[pip](http://pypi.python.org/pypi/pip)安装必要的包：\n\n    $ mkdir sample_project && cd !$\n    $ mkvirtualenv --no-site-packages `pwd`/env\n    $ source env/bin/activate\n    $ pip install Flask Frozen-Flask Flask-FlatPages\n\n写我们第一个版本的`sitebuilder.py`：\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route("/")\ndef index():\n    return "Hello World!"\n\nif __name__ == "__main__":\n    app.run(port=8000)\n```\n\n运行它;你应该看到类似：\n\n    $ python sitebuilder.py \n     * Running on http://127.0.0.1:8000/ \n     * Restarting with reloader\n\n用浏览器打开_http://:127.0.0.1:8000_看是否正常。\n\n## 又一轮：添加纯文本页面\n\n[Flask-FlatPages](http://packages.python.org/Flask-FlatPages/)为你的Flask应用提供一套页面。相对动态页面从关系数据库构建，静态页面是从纯文本文件构建。\n\n在你的项目跟文件夹下创建一个`pages/`目录，新建一个`hello-wolrd.md`扔进去：\n\n$ mkdir pages\n$ vi pages/hello-world.md\n\n`hello-world.md`文件：\n\n    title: Hello World\n    date: 2012-03-04\n    \n    **Hello World**, from a *page*!\n\n如你所见你可以在页面内容中写入[Markdown](/404)。所以让我们重新写我们的应用来为通过文件名为任何纯文本提供服务。\n\n```python\n    from flask import Flask\n    from flask_flatpages import FlatPages\n    \n    DEBUG = True\n    FLATPAGES_AUTO_RELOAD = DEBUG\n    FLATPAGES_EXTENSION = \'.md\'\n    \n    app = Flask(__name__)\n    app.config.from_object(__name__)\n    pages = FlatPages(app)\n    \n    @app.route(\'/\')\n    def index():\n        return "Hello World"\n    \n    @app.route(\'/<path:path>/\')\n    def page(path):\n        return pages.get_or_404(path).html\n    \n    if __name__ == \'__main__\':\n        app.run(port=8000)\n```\n\n现在访问`http://127.0.0.1:8000/hello-world/`将呈现渲染后的纯文本。注意通过page对象获得html属性markdown源码被转换成html。\n\n## 又一轮：添加模板\n\nflask使用[jinja2](http://jinja.pocoo.org/docs/)模板引擎，让我们创建一些模板来装饰页面。首先在项目根目录下创建一个`templates`文件夹：\n\n    $ mkdir templates\n\n在`templates/base.html`中创建基本布局：\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset="utf-8">\n    <title>My site</title>\n</head>\n<body>\n    <h1><a href="{{ url_for("index") }}">My site</a></h1>\n{% block content %}\n    <p>Default content to be displayed</p>\n{% endblock content %}\n</body>\n</html>\n```\n\n注意`url_for()`这个模板函数，这是我们使用Flask和Jinjia2生成url的方式。\n\n现在用`page.html`模板来填充页面内容的布局：\n\n```html\n{% extends "base.html" %}\n\n{% block content %}\n  <h2>{{ page.title }}</h2>\n\n{% endblock content %}\n  ```\n\n我们的应用现在应该是：\n\n```python\nfrom flask import Flask, render_template\nfrom flask_flatpages import FlatPages\n\nDEBUG = True\nFLATPAGES_AUTO_RELOAD = DEBUG\nFLATPAGES_EXTENSION = \'.md\'\n\napp = Flask(__name__)\napp.config.from_object(__name__)\npages = FlatPages(app)\n\n@app.route(\'/\')\ndef index():\n    return "Hello World"\n\n@app.route(\'/<path:path>/\')\ndef page(path):\n    page = pages.get_or_404(path)\n    return render_template(\'page.html\', page=page)\n\nif __name__ == \'__main__\':\n    app.run(port=8000)\n```\n\n见鬼，我们刚刚做了什么？\n\n- 创建了一个应用的模板;一个通用布局(base.html)和一个页面模板(page.html)\n- 我们使用`render_template`函数对页面用页面模板装饰。\n- 页面模板扩展基本模板来避免在每个页面都复制粘帖相同的内容。\n\n## 又一轮：在主页呈现页面列表\n\n现在我们的主页弱爆了。我们让它列出所有存在的页面。\n\n创建一个`templates/index.html`：\n\n```html\n{% extends "base.html" %}\n\n{% block content %}\n  <h2>List of stuff</h2>\n  <ul>\n    {% for page in pages %}\n      <li>\n        <a href="{{ url_for("page", path=page.path) }}">{{ page.title }}</a>\n      </li>\n    {% else %}\n      <li>No stuff.</li>\n    {% endfor %}\n</ul>\n{% endblock content %}\n```\n\n随意地创建更多纯文本页面，就像我们创建`hello-world.md`一样，将文件保存在`pages/`目录下，使用`.md`扩展名。\n\n我们应用中的`index()`路径现在应该这样：\n\n重载主页，页面列表将呈现。真他妈简单。\n\n## 又一轮：给页面添加元数据\n\nFlask-FlatPages允许像我们创建和`hello-world.md`的标题和日期一样添加元数据，并且通过`page.meta`来存取它们，获得看上去蠢蠢的python字典。真令人吃惊，不是吗？\n\n让我们假设想要给页面添加标签，我们的`hello-world.md`将变成：\n\n    title: Hello World\n    date: 2012-03-04\n    tags: [general, awesome, stuff]\n    \n    **Hello World**, from a *page*!\n\n元数据用[YAML](http://yaml.org/)描述，因此你能够使用字符串、布尔、整数、浮点、列表、甚至字典，它们将转换成Python相应的内在等价物。\n\n我们将使用两个包含共享部分的不同的模板来列出普通页面和标签页面，`index.html`现在应该是：\n\n```html\n    {% extends "base.html" %}\n    \n    {% block content %}\n        <h2>List of stuff</h2>\n        {% with pages=pages  %}\n            {% include "_list.html" %}\n        {% endwith %}\n    {% endblock content %}\n```\n\n创建`tag.html`模板，它将用来呈现标签页面列表：\n\n```html\n    {% extends "base.html" %}\n    \n    {% block content %}\n        <h2>List of stuff tagged <em>{{ tag }}</em></h2>\n        {% with pages=pages  %}\n            {% include "_list.html" %}\n        {% endwith %}\n    {% endblock content %}\n```\n\n新建的`_list.html`模板应该包含：\n\n```html\n    <ul>\n    {% for page in pages %}\n        <li>\n            <a href="{{ url_for("page", path=page.path) }}">{{ page.title }}</a>\n        {% if page.meta.tags|length %}\n            | Tagged:\n            {% for page_tag in page.meta.tags %}\n                <a href="{{ url_for("tag", tag=page_tag) }}">{{ page_tag }}</a>\n            {% endfor %}\n        {% endif %}\n        </li>\n    {% else %}\n        <li>No page.</li>\n    {% endfor %}\n    </ul>\n```\n\n向应用中添加新的tag路径，使用新的`tag.html`模板：\n\n```python\n@app.route(\'/tag/<string:tag>/\')\ndef tag(tag):\n    tagged = [p for p in pages if tag in p.meta.get(\'tags\', [])]\n    return render_template(\'tag.html\', pages=tagged, tag=tag)\n```\n\n注：若你之前不喜欢python的[列表推导式](http://www.network-theory.co.uk/docs/pytut/ListComprehensions.html)，现在你会了。\n\n## 又一轮：生成静态页面\n\n好的，现在我们只要有一个动态网站，为存储在文件系统上的纯文本页面提供服务：废话。但是我们当然不是Flask应用而是一堆静态文件，省去了任何应用服务器。\n\n来进入Frozen-Flask。它的使用真他妈简单：\n\n```python\nimport sys\n\nfrom flask import Flask, render_template\nfrom flask_flatpages import FlatPages\nfrom flask_frozen import Freezer\n\nDEBUG = True\nFLATPAGES_AUTO_RELOAD = DEBUG\nFLATPAGES_EXTENSION = \'.md\'\n\napp = Flask(__name__)\napp.config.from_object(__name__)\npages = FlatPages(app)\nfreezer = Freezer(app)\n\n@app.route(\'/\')\ndef index():\n    return render_template(\'index.html\', pages=pages)\n\n@app.route(\'/tag/<string:tag>/\')\ndef tag(tag):\n    tagged = [p for p in pages if tag in p.meta.get(\'tags\', [])]\n    return render_template(\'tag.html\', pages=tagged, tag=tag)\n\n@app.route(\'/<path:path>/\')\ndef page(path):\n    page = pages.get_or_404(path)\n    return render_template(\'page.html\', page=page)\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1 and sys.argv[1] == "build":\n        freezer.freeze()\n    else:\n        app.run(port=8000)\n```\n\n然后运行：\n\n    $ python sitebuilder.py build\n\n打开构建文件夹键入如下命令：\n\n    $ tree\n    .\n    ├── hello-world\n    │   └── index.html\n    ├── index.html\n    └── tag\n        ├── awesome\n        │   └── index.html\n        ├── general\n        │   └── index.html\n        └── stuff\n            └── index.html\n    \n    5 directories, 5 files\n\n## 想法：吓坏了\n\n你现在能部署`build`目录下的任何文件到任何能托管静态文件的地方了，而你仅仅用34行Python代码就完成了……不错吧？\n\n当然，现在的版本弱爆了，你能一点一点的为它添加各种特性了。\n',metaData:{layout:"post",title:"Flask驱动的静态站点生成器(译)",excerpt:"翻译",category:"python",tags:["flask","python"],disqus:!0}}}});