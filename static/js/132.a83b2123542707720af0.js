webpackJsonp([132,183],{303:function(n,t){n.exports={rawContent:"\n\n# SymPy Tutorial\n\n翻译自：[SymPy Tutorial](http://docs.sympy.org/dev/tutorial.html),其实有人译过了，但我看着不爽……你看我的不爽可以参考他的[SymPy简明教程](http://blankdesktop.blogbus.com/logs/74200705.html)\n\n**目录**\n\n* toc\n{: toc}\n\n## 引言\n\nSymPy是一个符号数学Python库。它的目标是成为一个全功能的计算机代数系统，同时保持代码的精简而易于理解和课扩展。SymPy完全由Python写成，不需要任何外部库。 \n\n这个教程概述和简介SymPy。阅读它能让你知道SymPy可以为你做什么。如果你想了解更多，阅读[SymPy用户指南](http://docs.sympy.org/0.7.1/guide.html#guide)和[SymPy模块参考](http://docs.sympy.org/0.7.1/modules/index.html#module-docs)。或者直接阅读[源码](https://github.com/sympy/sympy/)。\n\n## SymPy第一步\n\n下载它最简单的方法是去[http://code.google.com/p/sympy/](http://code.google.com/p/sympy/)从“推荐下载”下载最新的压缩包。[^1]\n![downloads](http://fmn.rrimg.com/fmn061/20120901/1800/p_large_M3yG_5d30000027c61261.jpg)\n\n解压：\n\n    tar xzf sympy-0.7.1.tar.gz\n\n然后用Python解释器尝试它：\n\n    [lyy@arch ~]cd sympy-0.7.1\n    [lyy@arch ~]$ python2\n    Python 2.7.3 (default, Apr 24 2012, 00:00:54) \n    [GCC 4.7.0 20120414 (prerelease)] on linux2\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> from sympy import Symbol, cos\n    >>> x = Symbol('x')\n    >>> (1/cos(x)).series(x, 0, 10)\n    1 + x**2/2 + 5*x**4/24 + 61*x**6/720 + 277*x**8/8064 + O(x**10)\n\n你可以如上展示使用SymPy。如果你在你的程序中使用它的话，这确实是推荐的方法。你也可以用`./setup.py install`像所有其它Python模块一样安装它，或者仅仅在你心爱的发行版中安装相应的包，等等。\n\n**在archlinux中安装SymPy**\n    \n    [lyy@arch ~]$ sudo pacman -S python2-sympy\n    警告：python2-sympy-0.7.1-4 已经为最新 -- 重新安装\n    正在解决依赖关系...\n    正在查找内部冲突...\n    \n    目标 (1)： python2-sympy-0.7.1-4\n    \n    全部安装大小：25.12 MiB\n    净更新大小：0.00 MiB\n    \n    进行安装吗？ [Y/n] \n    (1/1) 正在检查软件包完整性      [###############################] 100%\n    (1/1) 正在加载软件包文件        [###############################] 100%\n    (1/1) 正在检查文件冲突          [###############################] 100%\n    (1/1) 正在检查可用硬盘空间      [###############################] 100%\n    (1/1) 正在更新 python2-sympy\n\n其它安装SymPy的方法，查阅SymPy主页上的[下载](http://code.google.com/p/sympy/wiki/DownloadInstallation?tm=2)标签。\n\n### isympy控制台\n\n为了试验新功能，或当搞清楚如何做事时，你可以使用我们对IPython的特殊封装`isympy`(它位于`/bin/isympy`中，如果你正在从源码文件夹运行的话)，它仅仅是一个已经导入相关sympy模块的标准python shell，定义了符号`x,y,z`和一些其它东西：\n\n    [lyy@arch ~]$ cd sympy \n    [lyy@arch ~]$ ./bin/isympy \n    IPython console for SymPy 0.7.1 (Python 2.7.3-64-bit) (ground types: python)\n    \n    These commands were executed:\n    >>> from __future__ import division\n    >>> from sympy import *\n    >>> x, y, z, t = symbols('x y z t')\n    >>> k, m, n = symbols('k m n', integer=True)\n    >>> f, g, h = symbols('f g h', cls=Function)\n    \n    Documentation can be found at http://www.sympy.org\n    \n    In [1]: (1/cos(x)).series(x, 0, 10)\n    Out[1]: \n         2      4       6        8           \n        x    5⋅x    61⋅x    277⋅x            \n    1 + ── + ──── + ───── + ────── + O(x**10)\n        2     24     720     8064  \n\n### 用SymPy做计算器\n\nSymPy有三种内建的数值类型：浮点数、有理数和整数。\n\n有理数类用一对整数表示一个有理数：分子和分母，所以`Rational(1,2)`代表1/2,`Rational(5,2)`代表5/2等等。\n\n    >>> from sympy import *\n    >>> a = Rational(1,2)\n    \n    >>> a\n    1/2\n    \n    >>> a*2\n    1\n    \n    >>> Rational(2)**50/Rational(10)**50\n    1/88817841970012523233890533447265625\n\n当计算整型数据时小心处理，因为他们会截取整数部分。这就是为何：\n\n    >>> 1/2\n    0\n    \n    >>> 1.0/2\n    0.5\n\n然而你可以这样做\n\n    >>> from __future__ import division\n    \n    >>> 1/2 \n    0.5\n\n真正的除法将要成为python3k的标准，isympy中也是。\n\n我们也有些特殊的常数，像e和pi，它们被视为符号(1+pi将不被数值求解，它将保持为1+pi)，并且我们可以有任意精度：\n\n    >>> pi**2\n    pi**2\n    \n    >>> pi.evalf()\n    3.14159265358979\n    \n    >>> (pi+exp(1)).evalf()\n    5.85987448204884\n\n就像你看到的，`evalf`将表达式求解为浮点数。\n\n这还有一个类表示数学上的无限，叫作`oo`：\n\n    >>> oo > 99999\n    True\n    >>> oo + 1\n    oo\n\n### 符号\n\n和其它计算机代数系统相比，在SymPy中你不得不显式地声明符号变量：\n\n    >>> from sympy import *\n    >>> x = Symbol('x')\n    >>> y = Symbol('y')\n\n然后你可以使用它们：\n\n    >>> x+y+x-y\n    2*x\n    \n    >>> (x+y)**2\n    (x + y)**2\n    \n    >>> ((x+y)**2).expand()\n    x**2 + 2*x*y + y**2\n\n使用`subs(old, new)`用其它符号和数代换它们：\n\n    >>> ((x+y)**2).subs(x, 1)\n    (y + 1)**2\n    \n    >>> ((x+y)**2).subs(x, y)\n    4*y**2\n\n对于剩余的教程，我们假设我们已经运行了：\n\n    >>> import sys\n    >>> oldhook = sys.displayhook\n    >>> sys.displayhook = pprint\n\n这样就有漂亮的打印。参见之后的[打印](#section-16)部分。如果你安装了unicode字体，你的输出可能看起来有点不同。(将看起来稍微好些)\n\n## 代数\n\n对部分分式分解，使用`apart(expr, x)`：\n\n    >>> 1/((x+2)*(x+1))\n           1       \n    ───────────────\n    (x + 1)⋅(x + 2)\n    >>> apart(1/((x+2)*(x+1)), x)\n        1       1  \n    - ───── + ─────\n      x + 2   x + 1\n    >>> (x+1)/(x-1)\n    x + 1\n    ─────\n    x - 1\n    >>> apart((x+1)/(x-1), x)\n          2  \n    1 + ─────\n        x - 1\n\n把它们重新结合起来，使用`together(expr, x)`：\n\n    >>> z = Symbol('z')\n    >>> together(1/x + 1/y + 1/z)\n    x⋅y + x⋅z + y⋅z\n    ───────────────\n         x⋅y⋅z     \n    >>> together(apart((x+1)/(x-1), x), x)\n    x + 1\n    ─────\n    x - 1\n    >>> together(apart(1/( (x+2)*(x+1) ), x), x)\n           1       \n    ───────────────\n    (x + 1)⋅(x + 2)\n\n## 演算\n\n### 极限\n\n极限在sympy中使用很简单，它们的语法是`limit(function, variable, point)`，所以计算当x趋近于0时f(x)的极限，你可以给出`limit(f, x, 0)`：\n\n    >>> from sympy import *\n    >>> x=Symbol(\"x\")\n    >>> limit(sin(x)/x, x, 0)\n    1\n\n你也可以计算在无穷的极限：\n\n    >>> limit(sin(x)/x,x,0)\n    1\n    >>> limit(x,x,oo)\n    ∞\n对于一些不寻常的极限例子，你可以阅读这个测试文件[test_demidovich.py](https://github.com/sympy/sympy/blob/master/sympy/series/tests/test_demidovich.py)\n\n### 微分\n\n你可以使用`diff(func, var)`微分任何SymPy表达式。例如：\n\n    >>> from sympy import *\n    >>> x = Symbol('x')\n    >>> diff(sin(x), x)\n    cos(x)\n    >>> diff(sin(2*x), x)\n    2⋅cos(2⋅x)\n    >>> diff(tan(x), x)\n       2       \n    tan (x) + 1\n\n你可以检查正确性：\n\n    >>> limit((tan(x+y)-tan(x))/y, y, 0)\n       2       \n    tan (x) + 1\n\n高阶微分可以使用`diff(func, var, n)`来计算：\n\n    >>> diff(sin(2*x), x, 1)\n    2⋅cos(2⋅x)\n    >>> diff(sin(2*x), x, 2)\n    -4⋅sin(2⋅x)\n    >>> diff(sin(2*x), x, 3)\n    -8⋅cos(2⋅x)\n\n### 级数展开\n\n使用`.series(var, point, order)`:\n\n    >>> cos(x).series(x, 0, 10)\n         2    4     6      8            \n        x    x     x      x             \n    1 - ── + ── - ─── + ───── + O(x**10)\n        2    24   720   40320 \n    >>> (1/cos(x)).series(x, 0, 10)\n         2      4       6        8           \n        x    5⋅x    61⋅x    277⋅x            \n    1 + ── + ──── + ───── + ────── + O(x**10)\n        2     24     720     8064            \n\n另一个简单的例子：\n\n    >>> from sympy import Integral, Symbol, pprint\n    >>> x = Symbol('x')\n    >>> y = Symbol('y')\n    >>> e = 1/(x + y)\n    >>> s = e.series(x, 0, 5)\n    >>> print(s)\n    1/y - x/y**2 + x**2/y**3 - x**3/y**4 + x**4/y**5 + O(x**5)\n    >>> pprint(s)\n              2    3    4          \n    1   x    x    x    x           \n    ─ - ── + ── - ── + ── + O(x**5)\n    y    2    3    4    5          \n        y    y    y    y           \n    None\n\n### 求和\n\n计算给定求和变量界限的f的总和(Summation)。[^2]\n\n`summation(f, (i, a, b))`变量i从a到b计算f的和，也就是，\n\n                                b\n                              ____\n                              \\   `\n    summation(f, (i, a, b)) =  )    f\n                              /___,\n                              i = a\n\n如果不能计算总和，它将打印相应的求和公式。求值可引入额外的极限计算：\n\n    >>> from sympy import summation, oo, symbols, log\n    >>> i, n, m = symbols('i n m', integer=True)\n    >>> summation(2*i - 1, (i, 1, n))\n     2\n    n \n    >>> summation(1/2**i, (i, 0, oo))\n    2\n    >>> summation(1/log(n)**n, (n, 2, oo))\n      ∞           \n     ___          \n     \\  `         \n      \\      -n   \n      /   log  (n)\n     /__,         \n    n = 2         \n    >>> summation(i, (i, 0, n), (n, 0, m))\n     3    2    \n    m    m    m\n    ── + ── + ─\n    6    2    3\n    >>> from sympy.abc import x\n    >>> from sympy import factorial\n    >>> summation(x**n/factorial(n), (n, 0, oo))\n     x\n    ℯ \n\n### 积分\n\n通过`integrate()`功能(facility)，SymPy对基本和特殊函数定与不定积分有卓越的支持。\n该功能使用有力的扩展Risch-Norman算法，启发算法和模式匹配：\n\n    >>> from sympy import integrate, erf, exp, sin, log, oo, pi, sinh, symbols\n    >>> x, y = symbols('x,y')\n\n你可以对基本函数积分：\n\n    >>> integrate(6*x**5, x)\n     6\n    x \n    >>> integrate(sin(x), x)\n    -cos(x)\n    >>> integrate(log(x), x)\n    x⋅log(x) - x\n    >>> integrate(2*x + sinh(x), x)\n     2          \n    x  + cosh(x)\n\n特殊函数也可以简单的处理：\n\n    >>> integrate(exp(-x**2)*erf(x), x)\n      ⎽⎽⎽    2   \n    ╲╱ π ⋅erf (x)\n    ─────────────\n          4      \n\n还可以计算定积分：\n\n    >>> integrate(x**3, (x, -1, 1))\n    0\n    >>> integrate(sin(x), (x, 0, pi/2))\n    1\n    >>> integrate(cos(x), (x, -pi/2, pi/2))\n    2\n\n反常积分也被支持：\n\n    >>> integrate(exp(-x), (x, 0, oo))\n    1\n    >>> integrate(log(x), (x, 0, 1))\n    -1\n\n### 复数\n\n除了复数单元`I`是虚数，符号可以被用属性创建(例如 real,positive,complex,等等)这将影响它们的表现：\n\n    >>> from sympy import Symbol, exp, I\n    >>> x = Symbol('x')  # a plain x with no attributes\n    >>> exp(I*x).expand()\n     ⅈ⋅x\n    ℯ   \n    >>> exp(I*x).expand(complex=True)\n       -im(x)               -im(x)           \n    ⅈ⋅ℯ      ⋅sin(re(x)) + ℯ      ⋅cos(re(x))\n    >>> x = Symbol('x', real=True)\n    >>> exp(I*x).expand(complex=True)\n    ⅈ⋅sin(x) + cos(x)\n\n### 函数\n\n**三角函数:**\n\n    >>> from sympy import asin, asinh, cos, sin, sinh, symbols, I\n    >>> x, y = symbols('x,y')\n    >>> sin(x+y).expand(trig=True)\n    sin(x)⋅cos(y) + sin(y)⋅cos(x)\n    >>> cos(x+y).expand(trig=True)\n    -sin(x)⋅sin(y) + cos(x)⋅cos(y)\n    >>> sin(I*x)\n    ⅈ⋅sinh(x)\n    >>> sinh(I*x)\n    ⅈ⋅sin(x)\n    >>> asinh(I)\n    ⅈ⋅π\n    ───\n     2 \n    >>> asinh(I*x)\n    ⅈ⋅asin(x)\n    >>> sin(x).series(x, 0, 10)\n         3     5     7       9             \n        x     x     x       x              \n    x - ── + ─── - ──── + ────── + O(x**10)\n        6    120   5040   362880           \n    >>> sinh(x).series(x, 0, 10)\n         3     5     7       9             \n        x     x     x       x              \n    x + ── + ─── + ──── + ────── + O(x**10)\n        6    120   5040   362880           \n    >>> asin(x).series(x, 0, 10)\n         3      5      7       9           \n        x    3⋅x    5⋅x    35⋅x            \n    x + ── + ──── + ──── + ───── + O(x**10)\n        6     40    112     1152           \n    >>> asinh(x).series(x, 0, 10)\n         3      5      7       9           \n        x    3⋅x    5⋅x    35⋅x            \n    x - ── + ──── - ──── + ───── + O(x**10)\n        6     40    112     1152    \n\n**球谐函数：**\n\n    >>> from sympy import Ylm\n    >>> from sympy.abc import theta, phi\n    >>> Ylm(1, 0, theta, phi)\n      ⎽⎽⎽       \n    ╲╱ 3 ⋅cos(θ)\n    ────────────\n          ⎽⎽⎽   \n      2⋅╲╱ π    \n    >>> Ylm(1, 1, theta, phi)\n       ⎽⎽⎽  ⅈ⋅φ       \n    -╲╱ 6 ⋅ℯ   ⋅sin(θ)\n    ──────────────────\n             ⎽⎽⎽      \n         4⋅╲╱ π       \n    >>> Ylm(2, 1, theta, phi)\n       ⎽⎽⎽⎽  ⅈ⋅φ              \n    -╲╱ 30 ⋅ℯ   ⋅sin(θ)⋅cos(θ)\n    ──────────────────────────\n                 ⎽⎽⎽          \n             4⋅╲╱ π       \n\n**阶乘和伽马函数：**\n\n    >>> from sympy import factorial, gamma, Symbol\n    >>> x = Symbol(\"x\")\n    >>> n = Symbol(\"n\", integer=True)\n    >>> factorial(x)\n    x!\n    >>> factorial(n)\n    n!\n    >>> gamma(x + 1).series(x, 0, 3) # i.e. factorial(x)\n                        2  2             2  2          \n                       π ⋅x    EulerGamma ⋅x           \n    1 - EulerGamma⋅x + ───── + ────────────── + O(x**3)\n                         12          2     \n\n**zeta函数：**\n\n    >>> from sympy import zeta\n    >>> zeta(4, x)\n    ζ(4, x)\n    >>> zeta(4, 1)\n     4\n    π \n    ──\n    90\n    >>> zeta(4, 2)\n          4\n         π \n    -1 + ──\n         90\n    >>> zeta(4, 3)\n            4\n      17   π \n    - ── + ──\n      16   90\n\n**多项式：**\n\n    >>> from sympy import assoc_legendre, chebyshevt, legendre, hermite\n    >>> chebyshevt(2, x)\n       2    \n    2⋅x  - 1\n    >>> chebyshevt(4, x)\n       4      2    \n    8⋅x  - 8⋅x  + 1\n    >>> legendre(2, x)\n       2    \n    3⋅x    1\n    ──── - ─\n     2     2\n    >>> legendre(8, x)\n          8         6         4        2      \n    6435⋅x    3003⋅x    3465⋅x    315⋅x     35\n    ─────── - ─────── + ─────── - ────── + ───\n      128        32        64       32     128\n    >>> assoc_legendre(2, 1, x)\n            ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽\n           ╱    2     \n    -3⋅x⋅╲╱  - x  + 1 \n    >>> assoc_legendre(2, 2, x)\n         2    \n    - 3⋅x  + 3\n    >>> hermite(3, x)\n       3       \n    8⋅x  - 12⋅x\n\n### 微分方程\n\n在 isympy中：\n\n    >>> from sympy import Function, Symbol, dsolve\n    >>> f = Function('f')\n    >>> x = Symbol('x')\n    >>> f(x).diff(x, x) + f(x)\n             2      \n            d       \n    f(x) + ───(f(x))\n             2      \n           dx       \n    >>> dsolve(f(x).diff(x, x) + f(x), f(x))\n    f(x) = C₁⋅cos(x) + C₂⋅sin(x)\n\n### 代数方程\n\n在isympy中：\n\n    >>> from sympy import solve, symbols\n    >>> x, y = symbols('x,y')\n    >>> solve(x**4 - 1, x)\n    [1, -1, -ⅈ, ⅈ]\n    >>> solve([x + 5*y - 2, -3*x + 6*y - 15], [x, y])\n    {x: -3, y: 1}\n\n## 线性代数\n\n### 矩阵\n\n矩阵从Matrix类创建：\n\n    >>> from sympy import Matrix, Symbol\n    >>> Matrix([[1,0], [0,1]])\n    ⎡1  0⎤\n    ⎢    ⎥\n    ⎣0  1⎦\n\n它可以包含符号：\n\n    >>> x = Symbol('x')\n    >>> y = Symbol('y')\n    >>> A = Matrix([[1,x], [y,1]])\n    >>> A\n    ⎡1  x⎤\n    ⎢    ⎥\n    ⎣y  1⎦\n    >>> A**2\n    ⎡x⋅y + 1    2⋅x  ⎤\n    ⎢                ⎥\n    ⎣  2⋅y    x⋅y + 1⎦\n\n更多有关矩阵信息，参见线性代数教程。\n\n## 模式匹配\n\n使用`.match()`方法，和Wild类对表达式实行模式匹配。这个方法将返回一个发生替换的字典，如下：\n\n    >>> from sympy import Symbol, Wild\n    >>> x = Symbol('x')\n    >>> p = Wild('p')\n    >>> (5*x**2).match(p*x**2)\n    {p: 5}\n    >>> q = Wild('q')\n    >>> (x**2).match(p*x**q)\n    {p: 1, q: 2}\n\n如果匹配失败，将返回`None`：\n\n    >>> print (x+1).match(p**x)\n    None\n\n可以指定`Wild`类的排除参数去保证一些东西不出现在结果之中：\n\n    >>> p = Wild('p', exclude=[1,x])\n    >>> print (x+1).match(x+p) # 1 is excluded\n    None\n    >>> print (x+1).match(p+1) # x is excluded\n    None\n    >>> print (x+1).match(x+2+p) # -1 is not excluded\n    {p_: -1}\n\n## 打印\n\n这里有许多打印表达式的方法：\n\n**标准**\n\n这就是`str(expression)`返回的，看起来想这样：\n\n    >>> from sympy import Integral\n    >>> from sympy.abc import x\n    >>> print x**2\n    x**2\n    >>> print 1/x\n    1/x\n    >>> print Integral(x**2, x)\n    Integral(x**2, x)\n\n**漂亮的打印**\n\n`pprint`函数产生好看的ascii艺术打印：\n\n    >>> from sympy import Integral, pprint\n    >>> from sympy.abc import x\n    >>> pprint(x**2)\n     2\n    x \n    None\n    >>> pprint(1/x)\n    1\n    ─\n    x\n    None\n    >>> pprint(Integral(x**2, x))\n    ⌠      \n    ⎮  2   \n    ⎮ x  dx\n    ⌡      \n    None\n\n如果你安装了unicode字体，`pprint`函数将默认使用它。你可以使用`use_unicode`函数改变这个选项。：\n\n    >>> pprint(Integral(x**2, x), use_unicode=False)\n      /     \n     |      \n     |  2   \n     | x  dx\n     |      \n    /       \n    None\n\n更多好看的unicode打印另见维基[Pretty Printing](https://github.com/sympy/sympy/wiki/Pretty-Printing)。\n\n小技巧：在Python解释器中默认使用漂亮的打印，使用：\n\n    $ python\n    Python 2.5.2 (r252:60911, Jun 25 2008, 17:58:32)\n    [GCC 4.3.1] on linux2\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> from sympy import init_printing, var, Integral\n    >>> init_printing(use_unicode=False, wrap_line=False, no_global=True)\n    >>> var(\"x\")\n    x\n    >>> x**3/3\n     3\n    x\n    --\n    3\n    >>> Integral(x**2, x) #doctest: +NORMALIZE_WHITESPACE\n      /\n     |\n     |  2\n     | x  dx\n     |\n    /\n\n**Python打印**\n\n    >>> from sympy.printing.python import python\n    >>> from sympy import Integral\n    >>> from sympy.abc import x\n    >>> print python(x**2)\n    x = Symbol('x')\n    e = x**2\n    >>> print python(1/x)\n    x = Symbol('x')\n    e = 1/x\n    >>> print python(Integral(x**2, x))\n    x = Symbol('x')\n    e = Integral(x**2, x)\n\n**LaTeX打印**\n\n    >>> from sympy import Integral, latex\n    >>> from sympy.abc import x\n    >>> latex(x**2)\n    x^{2}\n    >>> latex(x**2, mode='inline')\n    $x^{2}$\n    >>> latex(x**2, mode='equation')\n    \\begin{equation}x^{2}\\end{equation}\n    >>> latex(x**2, mode='equation*')\n    \\begin{equation*}x^{2}\\end{equation*}\n    >>> latex(1/x)\n    \\frac{1}{x}\n    >>> latex(Integral(x**2, x))\n    \\int x^{2}\\,dx\n\n**MathML**\n\n    >>> from sympy.printing.mathml import mathml\n    >>> from sympy import Integral, latex\n    >>> from sympy.abc import x\n    >>> print mathml(x**2)\n    <apply><power/><ci>x</ci><cn>2</cn></apply>\n    >>> print mathml(1/x)\n    <apply><power/><ci>x</ci><cn>-1</cn></apply>\n\n**Pylet**\n\n    >>> from sympy import Integral, preview\n    >>> from sympy.abc import x\n    >>> preview(Integral(x**2, x))\n    This is pdfTeX, Version 3.1415926-2.4-1.40.13 (TeX Live 2012/Arch Linux)\n     restricted \\write18 enabled.\n    entering extended mode\n    (/tmp/tmpGYREx_.tex\n    LaTeX2e <2011/06/27>\n    Babel <v3.8m> and hyphenation patterns for english, dumylang, nohyphenation, ge\n    rman-x-2012-05-30, ngerman-x-2012-05-30, afrikaans, ancientgreek, ibycus, arabi\n    c, armenian, basque, bulgarian, catalan, pinyin, coptic, croatian, czech, danis\n    h, dutch, ukenglish, usenglishmax, esperanto, estonian, ethiopic, farsi, finnis\n    h, french, friulan, galician, german, ngerman, swissgerman, monogreek, greek, h\n    ungarian, icelandic, assamese, bengali, gujarati, hindi, kannada, malayalam, ma\n    rathi, oriya, panjabi, tamil, telugu, indonesian, interlingua, irish, italian, \n    kurmanji, latin, latvian, lithuanian, mongolian, mongolianlmc, bokmal, nynorsk,\n     polish, portuguese, romanian, romansh, russian, sanskrit, serbian, serbianc, s\n    lovak, slovenian, spanish, swedish, turkish, turkmen, ukrainian, uppersorbian, \n    welsh, loaded.\n    (/usr/share/texmf-dist/tex/latex/base/article.cls\n    Document Class: article 2007/10/19 v1.4h Standard LaTeX document class\n    (/usr/share/texmf-dist/tex/latex/base/size12.clo))\n    (/usr/share/texmf-dist/tex/latex/amsmath/amsmath.sty\n    For additional information on amsmath, use the `?' option.\n    (/usr/share/texmf-dist/tex/latex/amsmath/amstext.sty\n    (/usr/share/texmf-dist/tex/latex/amsmath/amsgen.sty))\n    (/usr/share/texmf-dist/tex/latex/amsmath/amsbsy.sty)\n    (/usr/share/texmf-dist/tex/latex/amsmath/amsopn.sty))\n    (/usr/share/texmf-dist/tex/latex/eulervm/eulervm.sty)\n    No file tmpGYREx_.aux.\n    (/usr/share/texmf-dist/tex/latex/eulervm/uzeur.fd)\n    (/usr/share/texmf-dist/tex/latex/eulervm/uzeus.fd)\n    (/usr/share/texmf-dist/tex/latex/eulervm/uzeuex.fd) [1] (./tmpGYREx_.aux) )\n    Output written on tmpGYREx_.dvi (1 page, 320 bytes).\n    Transcript written on tmpGYREx_.log.\n    This is dvipng 1.14 Copyright 2002-2010 Jan-Ake Larsson\n    [1] \n\n如果pyglet被安装了，一个包含LaTeX渲染后表达式的pyglet窗口将被打开：\n\n![pyglet](http://fmn.rrimg.com/fmn059/20120903/1210/p_large_ViwY_2fcc000000bf1262.jpg)\n\n### 注意\n\nisympy自动调用`pprint`,这就是为什么默认情况下你看到的是漂亮的打印。\n\n注意有一个可用的打印模块`sympy.printing`。其它通过这个模块的打印方法是：\n\n- `pretty(expr)`,`pretty_print(expr)`,`pprint(expr)`:分别漂亮的表示`expr`.这是和之前描述的第二层表示是一样的。\n- `latex(expr)`, `print_latex(expr)`：分别返回和打印`expr`的[LaTeX](http://www.latex-project.org/)表示。\n- `mathml(expr)`,`print_mathml(expr)`：分别返回和打印`expr`的[MathML](http://www.w3.org/Math/)表示。\n- `print_gtk(expr)`：在[Gtkmathview](http://helm.cs.unibo.it/mml-widget/)打印`expr`，这是一个呈现MathML代码的GTK部件。[Gtkmathview](http://helm.cs.unibo.it/mml-widget/)要求安装。\n\n## 更多文档\n\n现在该学更多有关SymPy的知识了。浏览[SymPy用户指南](http://docs.sympy.org/dev/guide.html#guide)和[SymPy模块参考](http://docs.sympy.org/dev/modules/index.html#module-docs)。\n\n一定也浏览我们的公共[wiki.sympy.org](http://wiki.sympy.org/)，那里包含了很多我们和我们的用户贡献的示例，教程，cookbook，请自由地编辑它。\n\n## 翻译\n\n这个教程还有其它语言：\n\n[德语](http://docs.sympy.org/dev/tutorial.de.html)\n\n---\n\n## FootNotes\n\n[^1]:不介意非稳定版我觉得git更方便一些，当然linux包管理器更方便,所以先用你的包管理器安装它。\n[^2]:Compute the summation of f with respect to the given summation variable over the given limits.\n",metaData:{layout:"post",title:"SymPy Tutorial(译)",excerpt:"翻译sympy tutorial",category:"python",tags:["python"],disqus:!0}}}});