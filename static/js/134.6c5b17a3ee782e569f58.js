webpackJsonp([134,170],{276:function(n,o){n.exports={rawContent:'\n\n# Common Lisp菜鸟指南\n\n翻译自[http://ghostopera.org/blog/2012/06/24/the-newbie-guide-to-common-lisp/](http://ghostopera.org/blog/2012/06/24/the-newbie-guide-to-common-lisp/) \n\n进入Common Lisp的世界可能非常让人退缩，甚至对有经验的程序猿也是这样。这个语言兼有力与美，但也有许多清晰的边界和没有真正被普遍理解的开端。\n\n这个指南可能将持续一段时间，但是希望它将使踏入Common Lisp的任务变得不那么可怕。\n\n## 理解Common Lisp\n\n[Ariel Networks][ariel] 有个适当形式的 Common Lisp 指南。\n\nThe [HyperSpec][hyperspec] 有完整的 Common Lisp 文档。\n\n[CLQR][clqr] 是一个好的课下载的 Common Lisp 快速参考手册。\n\n## 了解你的工具\n\n### Emacs[^1]\n\n[Emacs][emacs] 是一个可实用lisp高度定制的编辑器[^2]。它可以为lisp提供一个非常独特的实时开发流程。查看[David O\'Toole][http://dto.github.com/notebook/]在通过Emacs和他的 "Blocky.io" 游戏开发系统在一个游戏中的[lightning talk](http://blocky.io/blocky-lightning-talk-4.ogv)，来查看实时开发实例。很酷不是吗？\n\n### Steel Bank Common Lisp\n\n当这世界上有很多可用的 Common Lisp 实现时，[SBCL][sbcl] 是非常标准的实现。它很积极的被开发着，有适合的调试器、原生线程、多平台支持。\n\n### Quicklisp\n\n[Quicklisp][quicklisp] 使得从一套丰富的由社区发展的 Common Lisp 库开始变得更容易。它允许你仅仅通过几个简单命令下载、安装和加载任何700多库中的库。它完全取代了它的前任asdf-install,如果你熟悉RubyGems，这非常相似。\n\n### CL-Project\n\n[CL-Project][cl-project] 是白手起家一个新的 Common Lisp 项目的最佳现代方法。虽然它肯定不是必须的，但是它提供了一个创建新项目的合理起点。\n\n### Buildapp\n\n[Buildapp][buildapp] 使得创建SBCL的可执行文件更加方便\n\n### ASDF\n\n[ASDF][asdf] 允许你定义你的项目的结构和依赖。你可以把它当作Ruby世界中Rake和Gemfile的杂交。\n\n<hr />\n\n## 创建你的第一个应用程序\n\n我将把获取Emacs和SBCL的任务留给你自己，你可以找到所有Linux、Windows和MacOS的版本。\n\n### 安装Quicklisp和SLIME\n\n```bash\n$ curl -O http://beta.quicklisp.org/quicklisp.lisp\n$ sbcl --load quicklisp.lisp\nThis is SBCL 1.0.42.52, an implementation of ANSI Common Lisp.\nMore information about SBCL is available at <http://www.sbcl.org/>.\n\nSBCL is free software, provided as is, with absolutely no warranty.\nIt is mostly in the public domain; some portions are provided under\nBSD-style licenses.  See the CREDITS and COPYING files in the\ndistribution for more information.\n\n  ==== quicklisp quickstart loaded ====\n\n    To continue, evaluate: (quicklisp-quickstart:install)\n```\n\n\n```cl\n(quicklisp-quickstart:install)\n(ql:add-to-init-file)\n(ql:quickload "quicklisp-slime-helper")\n```\n\n### 创建应用程序\n\n载入Emacs并键入<esc> x slime <enter>。你现在应该可以看到REPL——一个交互的lisp提示符。\n\n```cl\n(ql:quickload "cl-project")\n(cl-project:make-project #p"myapp"\n  :author "Your name"\n  :email "your@email.com"\n  :license "BSD or whatever")\n(ql:quickload "myapp")\n(in-package :myapp)\n```\n\n现在在Emacs有scratch标签的窗口键入<esc> x cd <enter> myapp <enter> 紧接着输入 <control>x <control>f src/myapp.lisp <enter> 。你应该拥有了一个为准备极棒的编码新建立的myapp.lisp文件。\n\n让我们继续添加一些东西然后试试结果\n\n```cl\n(defun hello-world ()\n  (format t "Hello world.~%"))\n```\n\n现在我们可以把我们的更改注入REPL，通过把光标放到最后一行并键入<control>c <control>c。通过切换到REPL键入以下内容执行我们的新函数：\n\n```cl\n(hello-world)\n```\n\n恭喜你！你在通过 Common Lisp 编程\n\n### 重启Emacs后加载你的应用[^3]\n\nCL-Project 在运行时更改了当前路径，使得第一次加载你的应用很简单。\n\n你有3种方法把应用放到你的加载路径：\n\n- 为了让应用在你的当前路径，或者从应用路径启动你的Emacs或者在加载slime之前更改目录。\n- 把你的应用移动到 ~/quicklisp/local-projects 它将总是有用。\n- [向你的加载路径添加项目](http://common-lisp.net/project/asdf/asdf/Controlling-where-ASDF-searches-for-systems.html#Controlling-where-ASDF-searches-for-systems) 。\n\n\n个人选择对应用选择方法1对库文件选择方法2。\n\n### 创建可执行文件\n\n虽然做出有用的 Common Lisp 程序不必要创建可执行文件，它却肯定可以方便发布独立的应用。你生成的可执行文件将内嵌整个lisp环境，所以不要因二进制文件的体积感到吃惊……\n\n首先，定义可执行文件的切入点\n\n```cl\n(export \'main)\n(defun main (args)\n  (hello-world)\n  (cl-user::quit))\n```\n\n你将需要下载 [buildapp工具][buildapp] ，指导在它的网站上。\n\n现在从你的myapp目录我们可以在命令行运行buildapp去编译你的程序！\n\n```bash\nbuildapp --asdf-tree $HOME/quicklisp/dists/quicklisp/software \\\n  --load-system myapp --entry myapp:main --output hello\n```\n\n在程序所在目录运行你的程序\n\n```bash\n$ ./hello\nHello World.\n```\n\n## 下一步是什么？\n\n[实用Common Lisp编程](http://www.gigamonkeys.com/book/) [^4]很好的介绍Common Lisp的书。是我看的第一本对该语言介绍的书。\n\n[Common Lisp the Language,2nd Edition](http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html) Common Lisp的权威书籍\n\n[On Lisp](http://www.paulgraham.com/onlisp.html) [^5]提供全面的高级Lisp技术\n\n你应该看看 [Land of Lisp][land] 。它非常有趣，会是个相当愉快的阅读。\n\n<hr />\n\n## Footnotes\n\n[^1]: 当然可以用vim，vim中slimv正是为此而生，可参考译者的 "在Vim中使用lisp":slimv 一文。本文中操作都可以在vim中完成,只是不要尝试用那个quicklisp-slime-helper了。\n\n[^2]: Emacs内置elisp解释器。elisp是lisp的一个变种。\n\n[^3]: Vim中类似。\n\n[^4]: 有中文版，田春译。\n\n[^5]: 有中文版，有兴趣的同学也许可以看看 "这里":http://115.com/folder/faujangp#lisp \n\n<hr />\n\n## Changelog\n\n- 2012年06月27日 星期三 11时03分37秒 更正一些错误。加译作者更新内容\n\n[ariel]: http://labs.ariel-networks.com/cl-style-guide.html\n\n[hyperspec]: http://www.lispworks.com/documentation/HyperSpec/Front/index.htm\n\n[clqr]: http://clqr.boundp.org/\n\n[emacs]: http://www.gnu.org/software/emacs/  \n\n[slimv]: http://reverland.org/lisp/2012/02/23/vimlisp/\n\n[sbcl]: http://www.sbcl.org/\n\n[quicklisp]: http://www.quicklisp.org/\n\n[cl-project]: https://github.com/fukamachi/cl-project\n\n[buildapp]: http://www.xach.com/lisp/buildapp/\n\n[asdf]: http://www.xach.com/lisp/buildapp/\n\n[land]: http://landoflisp.com/\n',metaData:{layout:"post",title:"Common lisp菜鸟指南(译)",excerpt:"翻译自http://ghostopera.org/blog/2012/06/24/the-newbie-guide-to-common-lisp/ ",category:"lisp",tags:["lisp"],disqus:!0}}}});