webpackJsonp([110,170],{594:function(n,e){n.exports={rawContent:'\n\n# 调试代码\n\n翻译自：[http://scipy-lectures.github.com/advanced/debugging/index.html](http://scipy-lectures.github.com/advanced/debugging/index.html)\n\n作者：Gaël Varoquaux\n\n本教程探索工具，以更好地理解你的编程基础：调试，找到并修复错误。\n\n这并不特定适合Python科学计算社区，但是我们采取的策略量身定制。\n\n**先决条件**\n\n- Numpy\n- IPython\n- nosetests ([http://readthedocs.org/docs/nose/en/latest/](http://readthedocs.org/docs/nose/en/latest/))\n- line\\_profiler ([http://packages.python.org/line_profiler/](http://packages.python.org/line_profiler/))\n- pyflakes ([http://pypi.python.org/pypi/pyflakes](http://pypi.python.org/pypi/pyflakes))\n- gdb 用于C调试部分\n\n**目录**\n\n* toc\n{: toc}\n\n## 避免错误\n\n### 避免麻烦最佳编码法\n\n- 我们都写有bug的代码。接受它，解决它。\n- 写程序时，在心里测试和调试。\n- Keep it Simple, Stupid(KISS).\n  - 可能有效的最简单方法\n- Don‘t Repeat Yourself (DRY).\n  - 每个知识都必须有个单独、明确、在一个系统中的正式表示\n  - 常量、算法，等等。\n- 尝试限制你的代码间的相互关系(松耦合)\n- 赋予你的变量、函数和模块有意义的名字(不是数学名称)\n\n### pyflakes:快速静态分析\n\n这些是几个Python中的静态分析工具：[pylint](http://www.logilab.org/857)、[pychecker](http://pychecker.sourceforge.net/)和[pyflakes](http://pypi.python.org/pypi/pyflakes)。这里我们重点放在pyflakes上，这是最简单的工具。\n\n- _快速，简单_\n- 探测语法错误，漏掉的导入，名称的拼写错误。\n\n高度推荐在你的编辑器中集成pyflakes，它*确实产生巨大生产力*。\n\n#### 在当前编辑文件运行pyflakes\n\n你可以绑定一个键来在当前缓冲区运行pyflakes。\n\n- kate中 菜单：`设置 -> 配置kate`\n  - 在插件中勾选\'外部工具\'[^1]\n  - 在外部工具中，添加`pyflakes`:\n        \n        kdialog --title "pyflakes %filename" --msgbox "$(pyflakes %filename)"\n\n- 在TextMate中\n  菜单：TextMate -> 首选项 -> 高级 -> Shell变量，添加一个shell变量：\n      \n        TM_PYCHECKER=/Library/Frameworks/Python.framework/Versions/Current/bin/pyflakes\n\n    然后`Ctrl-Shift-V`被绑定到pyflakes报告上。\n\n- 在*Vim*中，在你的vimrc中(将F5绑定到pyflakes上)：\n\n        autocmd FileType python let &mp = \'echo "*** running % ***" ; pyflakes %\'\n        autocmd FileType tex,mp,rst,python imap <Esc>[15~ <C-O>:make!^M\n        autocmd FileType tex,mp,rst,python map  <Esc>[15~ :make!^M\n        autocmd FileType tex,mp,rst,python set autowrite]]    \n\n- 在emacs中，在你的.emacs中(绑定F5到pyflakes)：\n\n        (defun pyflakes-thisfile () (interactive)\n           (compile (format "pyflakes %s" (buffer-file-name)))\n        )\n        \n        (define-minor-mode pyflakes-mode\n            "Toggle pyflakes mode.\n            With no argument, this command toggles the mode.\n            Non-null prefix argument turns on the mode.\n            Null prefix argument turns off the mode."\n            ;; The initial value.\n            nil\n            ;; The indicator for the mode line.\n            " Pyflakes"\n            ;; The minor mode bindings.\n            \'( ([f5] . pyflakes-thisfile) )\n        )\n        \n        (add-hook \'python-mode-hook (lambda () (pyflakes-mode t)))\n\n#### 一个在线拼写检查集成\n\n- 在vim中使用vim.pyflakes插件：\n  1. 从[http://www.vim.org/scripts/script.php?script\\_id=2441](http://www.vim.org/scripts/script.php?script_id=2441)下载zip文件[^2]\n  2. 将文件解压到`.vim/ftplugin/python`\n  3. 确定你的vimrc中有\'filetype plugin indent on\'\n- 在emacs中在flymake模式中使用pyflakes，文档在[http://www.plope.com/Members/chrism/flymake-mode](http://www.plope.com/Members/chrism/flymake-mode):添加以下内容到你的.emacs文件：\n\n        (when (load "flymake" t)\n                (defun flymake-pyflakes-init ()\n                (let* ((temp-file (flymake-init-create-temp-buffer-copy\n                                    \'flymake-create-temp-inplace))\n                    (local-file (file-relative-name\n                                temp-file\n                                (file-name-directory buffer-file-name))))\n                    (list "pyflakes" (list local-file))))\n        \n                (add-to-list \'flymake-allowed-file-name-masks\n                        \'("\\\\.py\\\\\'" flymake-pyflakes-init)))\n        \n        (add-hook \'find-file-hook \'flymake-find-file-hook)\n\n## 调试工作流\n\n你确实有个并不微不足道的bug，这时调试策略就关键了。这没有银色子弹。然而，策略有帮助：\n\n> 对调试一个给定的问题，最受欢迎的情况是当问题被隔离成少量几行的代码，在框架和应用之外，伴随的更改-运行-失败循环\n\n1. 让出错可靠。找到一个测试实例让代码每次都出错(fail)\n2. 分解并且克服。一旦你有了一个失败测试实例，隔绝出错代码 。\n   - 哪个模块\n   - 哪个函数\n   - 哪行代码\n   = > 隔离小块可再生错误：测试样例。\n3. 一次更改一样东西，并且重新运行错误测试样例\n4. 使用调试器来理解哪里出错了\n5. 记笔记，保持耐心。这将花很久。\n\n**注意：**一旦你已经完成这个过程：严格隔离一片再生bug的代码并使用这片代码修复它，向你的测试套件中添加相应的代码。\n\n## 使用Python调试器\n\nPython调试器，`pdb`：[http://docs.python.org/library/pdb.html](http://docs.python.org/library/pdb.html)，允许你交互地检查你的代码。\n\n具体来说它允许你：\n\n- 查看源代码\n- 向上或向下查看调用堆栈\n- 检查变量值\n- 更改变量值\n- 设置断点\n\n**print**\n\n是的，print确实可以作为一个调试工具。然而在运行时检查的话，使用调试器通常更有效率。\n\n### 调用调试器\n\n开启调试器的方法：\n\n1. 尸检(post-mortem)，在模块错误后开启调试器\n2. 用调试器运行模块\n3. 在模块中调用调试器\n\n#### 尸检\n\n**情形：**你使用ipython并且你获得一个回溯(traceback)。\n\n现在让我们调试文件[index\\_error.py](http://scipy-lectures.github.com/_downloads/index_error.py)。当运行它时，一个`IndexError`被引发。键入`%debug`将进入调试器：\n\n    In [1]: %run index_error.py\n    ---------------------------------------------------------------------------\n    IndexError                                Traceback (most recent call last)\n    /usr/lib/python2.7/site-packages/IPython/utils/py3compat.py in execfile(fname, *where)\n        176             else:\n        177                 filename = fname\n    --> 178             __builtin__.execfile(filename, *where)\n    \n    /home/lyy/index_error.py in <module>()\n          6 \n          7 if __name__ == \'__main__\':\n    ----> 8     index_error()\n          9 \n    \n    /home/lyy/index_error.py in index_error()\n          3 def index_error():\n          4     lst = list(\'foobar\')\n    ----> 5     print lst[len(lst)]\n          6 \n          7 if __name__ == \'__main__\':\n    \n    IndexError: list index out of range\n    \n    In [2]: %debug\n    > /home/lyy/index_error.py(5)index_error()\n          4     lst = list(\'foobar\')\n    ----> 5     print lst[len(lst)]\n          6 \n    \n    ipdb> list\n          1 """Small snippet to raise an IndexError."""\n          2 \n          3 def index_error():\n          4     lst = list(\'foobar\')\n    ----> 5     print lst[len(lst)]\n          6 \n          7 if __name__ == \'__main__\':\n          8     index_error()\n          9 \n    \n    ipdb> len(lst)\n    6\n    ipdb> print lst[len(lst)-1]\n    r\n    ipdb> quit\n    \n    In [3]: \n\n**在IPython之外尸检[^3]调试**\n\n在一些情形下你无法使用IPython，例如调试一个想要从命令行调用的脚本。这中情况下，你可以使用`python -m pdb script.py`来调用脚本：\n\n    lyy@arch ~ % python2 -m pdb index_error.py\n    > /home/lyy/index_error.py(1)<module>()\n    -> """Small snippet to raise an IndexError."""\n    (Pdb) continue\n    Traceback (most recent call last):\n      File "/usr/lib/python2.7/pdb.py", line 1314, in main\n        pdb._runscript(mainpyfile)\n      File "/usr/lib/python2.7/pdb.py", line 1233, in _runscript\n        self.run(statement)\n      File "/usr/lib/python2.7/bdb.py", line 387, in run\n        exec cmd in globals, locals\n      File "<string>", line 1, in <module>\n      File "index_error.py", line 1, in <module>\n        """Small snippet to raise an IndexError."""\n      File "index_error.py", line 5, in index_error\n        print lst[len(lst)]\n    IndexError: list index out of range\n    Uncaught exception. Entering post mortem debugging\n    Running \'cont\' or \'step\' will restart the program\n    > /home/lyy/index_error.py(5)index_error()\n    -> print lst[len(lst)]\n    (Pdb) print lst[len(lst)]\n    *** IndexError: list index out of range\n\n#### 单步执行\n\n**情形：**你相信在模块中存在一个bug但不确定在哪里。\n\n例如我们尝试调试[wiener\\_filtering.py](http://scipy-lectures.github.com/_downloads/wiener_filtering.py)。确实代码运行了，但是滤波效果并不好。\n\n- 用调试器运行脚本：\n\n      In [1]: %run -d wiener_filtering.py\n      *** Blank or comment\n      *** Blank or comment\n      *** Blank or comment\n      Breakpoint 1 at /home/lyy/wiener_filtering.py:4\n      NOTE: Enter \'c\' at the ipdb>  prompt to start your script.\n      > <string>(1)<module>()\n\n- 进入[wiener\\_filtering.py](http://scipy-lectures.github.com/_downloads/wiener_filtering.py)并且在34行设置断点：\n\n      ipdb> n\n      > /home/lyy/wiener_filtering.py(4)<module>()\n            3 \n      1---> 4 import numpy as np\n            5 import scipy as sp\n\n      ipdb> b 34\n      Breakpoint 2 at /home/lyy/wiener_filtering.py:34\n\n- 用`c(out(inue))`继续执行到下一个断点:\n\n        ipdb> c\n        > /home/lyy/wiener_filtering.py(34)iterated_wiener()\n             33     """\n        2--> 34     noisy_img = noisy_img\n             35     denoised_img = local_mean(noisy_img, size=size)\n\n- 用`n(ext)`和`s(tep)`回到代码：`next`跳到当前执行文本的下一个语句，而`step`将穿越执行文本，也就是，可以深入探索函数调用：[^4]\n\n        ipdb> s\n        > /home/lyy/wiener_filtering.py(35)iterated_wiener()\n        2    34     noisy_img = noisy_img\n        ---> 35     denoised_img = local_mean(noisy_img, size=size)\n             36     l_var = local_var(noisy_img, size=size)\n        \n        ipdb> n\n        > /home/lyy/wiener_filtering.py(36)iterated_wiener()\n             35     denoised_img = local_mean(noisy_img, size=size)\n        ---> 36     l_var = local_var(noisy_img, size=size)\n             37     for i in range(3):\n\n- 执行几行然后探索局部变量：\n\n        ipdb> n\n        > /home/lyy/wiener_filtering.py(37)iterated_wiener()\n             36     l_var = local_var(noisy_img, size=size)\n        ---> 37     for i in range(3):\n             38         res = noisy_img - denoised_img\n        \n        ipdb> print l_var\n        [[5868 5379 5316 ..., 5071 4799 5149]\n         [5013  363  437 ...,  346  262 4355]\n         [5379  410  344 ...,  392  604 3377]\n         ..., \n         [ 435  362  308 ...,  275  198 1632]\n         [ 548  392  290 ...,  248  263 1653]\n         [ 466  789  736 ..., 1835 1725 1940]]\n        ipdb> print l_var.min()\n        0\n\nOh,亲爱的，除了整数什么也没有，还有0变动。这就是我们的bug所在，我们在做整数算术。\n\n**引发数值错误例外**\n\n当我们运行[wiener\\_filtering.py](http://scipy-lectures.github.com/_downloads/wiener_filtering.py)文件时，以下警告被引发(raise)：\n\n    In [1]: %run wiener_filtering.py\n    wiener_filtering.py:40: RuntimeWarning: divide by zero encountered in divide\n      noise_level = (1 - noise/l_var )\n\n我们可以将这些警告转化为例外(exception)，这让我们能对它们尸检调试，并且迅速找到我们的问题：\n\n    In [2]: np.seterr(all=\'raise\')\n    Out[2]: {\'divide\': \'warn\', \'invalid\': \'warn\', \'over\': \'warn\', \'under\': \'ignore\'}\n\n#### 其它开始调试的方法\n\n- **引发一个例外作为"可怜的"断点**\n  \n  如果你发现几下行号设置断点很无聊，你可以简单地在你想要检查的地方引发一个例外，使用ipython的`%debug`。注意在这种情况下你不能step和continue执行。\n- 使用nosetests调试测试失败\n  \n  你可以运行`nosetests --pdb`对例外(exception)尸检调试，并且`nosetests --pdb-failure`使用调试器来检查测试失败。\n  \n  另外，你可以通过安装nose插件[ipdbplugin](http://pypi.python.org/pypi/ipdbplugin)，在nose中使用IPython调试接口。你可以传递`--ipdb`和`--ipdb-failure`选项给nosetests。\n\n- 显式调用调试器\n\n    在你想要调试的地方放入以下一行：\n\n        import pdb; pdb.set_trace()\n\n<font color=\'red\'>警告：当运行<code>nosetests</code>时，输出被捕捉，并且因此似乎调试器不工作了。只要加上<code>-s</code>标志运行nosetests</font>\n  \n**图形化调试器**\n\n为了单步执行和检查变量，你也许觉得用图形化的调试器如[winpdb](http://winpdb.org/)更加方便。\n\n另外，[pudb](http://pypi.python.org/pypi/pudb)是一个很棒的半图形化调试器，它在终端里有一个文字用户界面。\n\n### 调试器命令和交互\n\n命令    |作用\n--------|-------\nl(list) |列出当前运行的代码\nu(p) \t|上一个调用堆栈\nd(own) \t|下一个调用堆栈\nn(ext) \t|执行下一行(不到新的函数)\ns(tep) \t|执行下一个语句(到新的函数)\nbt \t|打印调用堆栈\na \t|打印局部变量\n!command |执行特定的_Python_命令(相对于pdb命令)\n\n**警告：Debugger 命令不是Python代码**\n\n你不能想当然的命名一个变量。例如，例如，如果在其中，你不能在当前情形下覆盖用同名变量:_当在调试器中敲代码时，使用不同的名字而不是你的局部变量_。\n\n## 使用gdb调试段错误\n\n如果你有一个段错误，你不能通过pdb调试它，因为它会让Python解释器在进入调试器之前崩溃。同样，如果你在Python中嵌入的C代码有bug，pdb也没用。对这种情况我们使用在linux上可用的gnu调试器[gdb](http://www.gnu.org/s/gdb/)。\n\n在我们用gdb之前，让我们向它添加一些Python特有的工具。对此我们向我们的_gdbinit_添加一些宏。宏优化的选择依赖于你的Python版本和gdb版本。我已经在[gdbinit](http://scipy-lectures.github.com/_downloads/gdbinit)里添加了一个简化的版本，但是请自由地阅读[DebuggingWithGdb](http://wiki.python.org/moin/DebuggingWithGdb)。\n\n为用gdb调试脚本[segfault.py](http://scipy-lectures.github.com/_downloads/segfault.py)，我们可以在gdb中如下运行：\n\n    $ gdb python\n    ...\n    (gdb) run segfault.py\n    Starting program: /usr/bin/python segfault.py\n    [Thread debugging using libthread_db enabled]\n    \n    Program received signal SIGSEGV, Segmentation fault.\n    _strided_byte_copy (dst=0x8537478 "\\360\\343G", outstrides=4, src=\n        0x86c0690 <Address 0x86c0690 out of bounds>, instrides=32, N=3,\n        elsize=4)\n            at numpy/core/src/multiarray/ctors.c:365\n    365            _FAST_MOVE(Int32);\n    (gdb)\n\n我们得到一个段错误，并且gdb事后在C级别的堆栈中(不是python调用堆栈)捕捉到了它。我们可以使用使用gdb的命令调试C调用堆栈：\n\n    (gdb) up\n    #1  0x004af4f5 in _copy_from_same_shape (dest=<value optimized out>,\n        src=<value optimized out>, myfunc=0x496780 <_strided_byte_copy>,\n        swap=0)\n    at numpy/core/src/multiarray/ctors.c:748\n    748         myfunc(dit->dataptr, dest->strides[maxaxis],\n\n如你所见，现在我们在numpy的C代码中。我们想要知道什么Python代码触发了这个段错误，因此我们向上查看堆栈直到我们发现Python执行循环：\n\n    (gdb) up\n    #8  0x080ddd23 in call_function (f=\n        Frame 0x85371ec, for file /home/varoquau/usr/lib/python2.6/site-packages/numpy/core/arrayprint.py, line 156, in _leading_trailing (a=<numpy.ndarray at remote 0x85371b0>, _nc=<module at remote 0xb7f93a64>), throwflag=0)\n        at ../Python/ceval.c:3750\n    3750    ../Python/ceval.c: No such file or directory.\n            in ../Python/ceval.c\n    \n    (gdb) up\n    #9  PyEval_EvalFrameEx (f=\n        Frame 0x85371ec, for file /home/varoquau/usr/lib/python2.6/site-packages/numpy/core/arrayprint.py, line 156, in _leading_trailing (a=<numpy.ndarray at remote 0x85371b0>, _nc=<module at remote 0xb7f93a64>), throwflag=0)\n        at ../Python/ceval.c:2412\n    2412    in ../Python/ceval.c\n    (gdb)\n\n一旦我们在python执行循环中时，我们可以使用特殊的python帮助函数。例如我们找到相应的Python代码：\n\n    (gdb) pyframe\n    /home/varoquau/usr/lib/python2.6/site-packages/numpy/core/arrayprint.py (158): _leading_trailing\n    (gdb)\n\n这是numpy的代码，我们需要向上直到找到我们自己写的代码：\n\n    (gdb) up\n    ...\n    (gdb) up\n    #34 0x080dc97a in PyEval_EvalFrameEx (f=\n        Frame 0x82f064c, for file segfault.py, line 11, in print_big_array (small_array=<numpy.ndarray at remote 0x853ecf0>, big_array=<numpy.ndarray at remote 0x853ed20>), throwflag=0) at ../Python/ceval.c:1630\n    1630    ../Python/ceval.c: No such file or directory.\n            in ../Python/ceval.c\n    (gdb) pyframe\n    segfault.py (12): print_big_array\n\n相应的代码是：\n\n    def print_big_array(small_array):\n        big_array = make_big_array(small_array)\n        print big_array[-10:]\n        return big_array\n\n所以当打印`big_array[-10:]`时发生段错误。原因很简单，`big-array`的末尾被分配到程序内存之外了。[^5]\n\n**注意：**在gdbinit中定义的专用于python的命令，请阅读这个文件。[^6]\n\n## 总结练习\n\n以下脚本清晰易读，它致力于解决数值计算感兴趣的实际问题。但是它不能工作。你能调试它吗？\n\nPython源码[to\\_debug.py](http://scipy-lectures.github.com/_downloads/to_debug.py)\n\n    """\n    A script to compare different root-finding algorithms.\n    \n    This version of the script is buggy and does not execute. It is your task\n    to find an fix these bugs.\n    \n    The output of the script sould look like:\n    \n        Benching 1D root-finder optimizers from scipy.optimize:\n                    brenth:   604678 total function calls\n                    brentq:   594454 total function calls\n                    ridder:   778394 total function calls\n                    bisect:  2148380 total function calls\n    """\n    from itertools import product\n    \n    import numpy as np\n    from scipy import optimize\n    \n    FUNCTIONS = (np.tan,  # Dilating map\n                 np.tanh, # Contracting map\n                 lambda x: x**3 + 1e-4*x, # Almost null gradient at the root\n                 lambda x: x+np.sin(2*x), # Non monotonous function\n                 lambda x: 1.1*x+np.sin(4*x), # Fonction with several local maxima\n                )\n    \n    OPTIMIZERS = (optimize.brenth, optimize.brentq, optimize.ridder,\n                  optimize.bisect)\n    \n    \n    def apply_optimizer(optimizer, func, a, b):\n        """ Return the number of function calls given an root-finding optimizer, \n            a function and upper and lower bounds.\n        """\n        return optimizer(func, a, b, full_output=True)[1].function_calls,\n    \n    \n    def bench_optimizer(optimizer, param_grid):\n        """ Find roots for all the functions, and upper and lower bounds\n            given and return the total number of function calls.\n        """\n        return sum(apply_optimizer(optimizer, func, a, b)\n                   for func, a, b in param_grid)\n    \n    \n    def compare_optimizers(optimizers):\n        """ Compare all the optimizers given on a grid of a few different\n            functions all admitting a signle root in zero and a upper and\n            lower bounds.\n        """\n        random_a = -1.3 + np.random.random(size=100)\n        random_b =   .3 + np.random.random(size=100)\n        param_grid = product(FUNCTIONS, random_a, random_b)\n        print "Benching 1D root-finder optimizers from scipy.optimize:"\n        for optimizer in OPTIMIZERS:\n            print \'% 20s: % 8i total function calls\' % (\n                        optimizer.__name__, \n                        bench_optimizer(optimizer, param_grid)\n                    )\n    \n    \n    if __name__ == \'__main__\':\n        compare_optimizers(OPTIMIZERS)\n\n## Footnotes\n\n[^1]:我是没找到\n[^2]:关于插件的安装，我更倾向于pathogen\n[^3]:这词……\n[^4]:区别在于step停在函数调用，next立即执行函数调用\n[^5]:也许你得将shape从20000改的大点，2e5或更大。\n[^6]:提醒下，在gdb7或更高版本中，不再单独需要gdbinit文件。另外，要完成用gdb对python程序的调试，我想你的python程序都应该用`-g`来编译。\n',metaData:{layout:"post",title:"调试代码(Python)",excerpt:"Yet another 对scipy lecture notes的渣翻译：本教程探索工具，以更好地理解你的编程基础：调试，找到并修复错误。",category:"python",tags:["python","scipy-lecture-notes"],disqus:!0}}}});
//# sourceMappingURL=110.e6a9380893fc7afc8e8a.js.map