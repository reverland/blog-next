webpackJsonp([24,193],{599:function(n,e){n.exports={rawContent:"\n## ES6\n\nES6标准，也称ES2015。在2015年6月正式批准，这是javascript语言标准从2009年首次大版本更新。\n\n这个版本带来了很多新东西，说是新东西，估计基本读者也都见过。比如python中常用的Destructuring assignment、模块导入、generator和map与set，java中的WeakHashMap、Proxy，在coffeescript中常用的class关键字与子类、模板字符串和剩余参数与默认参数等等。处处都已经有了ES6的影子。\n\n最近做了几件事：\n\n1.  把nltk中wordnet corpus reader的python代码看了看，依葫芦画瓢画了个纯javascript版。\n2.  热情地把[Eloquent Javascript](http://eloquentjavascript.net/)的项目和练习复习一遍，然后继续接着往下看。\n\n对此，有了两个新认识：\n\n1.  Python是门强大的语言。特别是前几天在python中看到async关键字之后…\n2.  javascript是门强大的语言但并不简单，ES6让它更强大也更好用更简单\n\n这时候发现有几个地方用ES6特性非常方便。\n\n本文不会解释这些特性是什么，所以，如果是查资料查到这里，略过吧。\n\n## Generator\n\n在[nltk wordnet corpus](https://github.com/nltk/nltk/blob/develop/nltk/corpus/reader/wordnet.py)中，对wordnet data文件进行逐行解析的时候，这样处理一行内容：\n\n```python\n_iter = iter(line.split())\n_next_token = lambda: next(_iter)\n\ntry:\n\n    # get the lemma and part-of-speech\n    lemma = _next_token()\n    pos = _next_token()\n    # get the number of synsets for this lemma\n    n_synsets = int(_next_token())\n```\n\n显然，对每一行，首先生成一个iterator，这个iterator返回这一行用空格分隔的每一个单词。好在ES6中也支持generator/iterator了，对应如下。\n\n```javascript\nlet token = util.getIterator(line.split(/\\s+/).filter(v=>v!==''));\n// or let token = line.split(/\\s+/).filter(v=>v!=='')[Symbol.iterator]();\ntry {\n  // lemma and pos\n  lemma = token.next().value;\n  pos = token.next().value;\n  // get how many synsets for this lemma\n  nSynsets = parseInt(token.next().value);\n  assert(nSynsets > 0);\n  ...\n```\n\n其中，`getIterator`定义为一个generator函数，调用这个函数则生成对应的generator，下面的`for...of`用到了[`array`对象本身就有一个generator函数](http://devdocs.io/javascript/global\\_objects/symbol/iterator)的特性。\n\n```javascript\nutil.getIterator = function *(array) {\n  for (let value of array) {\n    yield value;\n  }\n}\n```\n\nnltk中生成ngram的方法的js实现\n\n```javascript\nfunction *ngrams(sequence, n) {\n  // Sadly, you cant use arrow function as generator here.\n  let  g = (function *(sequence){yield *sequence})(sequence);\n\n  let history = [];\n  while (n > 1) {\n    history.push(g.next().value);\n    n--;\n  }\n  for (let item of g) {\n    history.push(item);\n    // look out here.\n    // yield history; will yield reference.\n    yield Array.from(history);\n    history.shift();\n  }\n}\n```\n\n## Collections\n\n当我尝试用js实现[matrix67几年前在其博客讲到的新词发现算法](http://www.matrix67.com/blog/archives/5044)时，需要把一个穷举一个序列的所有分割可能。我这样实现的。\n\n```javascript\nfunction splitSet(s) {\n  function *_splitAll(s) {\n    if (s.length == 0) {\n      return;\n    }\n    yield s;\n    for (let i = 1; i < s.length; i++) {\n      let left = s.substr(0, i);\n      let right = s.substr(i);\n      for (let wl of _splitAll(left)) {\n        for (let wr of _splitAll(right)) {\n          yield wl + \" \" + wr;\n        }\n      }\n    }\n  }\n  let set = [];\n  for (let w of _splitAll(s)){\n    set.push(w);\n  }\n  return set;\n}\n```\n\n想得很好，通过将序列分为左右两部分递归简化处理。结果发现同一分割出现了多词。\n\n```\n> splitSet(\"abc\")\n[ 'abc', 'a bc', 'a b c', 'ab c', 'a b c' ]\n```\n\n相同的结果需要排除，这时候ES6中的`Set`就很方便了…\n\n```javascript\nlet set = new Set();\nfor (let w of _splitAll(s)){\n  set.add(w);\n}\nreturn set;\n```\n\n## Promise\n\n事实上，任何能使用Promise+Generator的地方我都会用，当然ES7中有了async和await关键字。比如在[youdaodict Userscript](https://greasyfork.org/en/scripts/12758-youdaodict)中实现调用audio API来播放有道mp3音频文件[实现跨域发音的函数](stackoverflow.com/questions/28554022/how-can-i-play-sound-with-a-greasemonkey-script-in-firefox-when-theres-a-conte).\n\n```javascript\nfunction play(word) {\n  //console.log(\"[DEBUG] PLAYOUND\")\n\n  function playSound(buffer) {\n    var source = context.createBufferSource();\n    source.buffer = buffer;\n    source.connect(context.destination);\n    source.start(0);\n  }\n\n  var context = new AudioContext()\n  var soundUrl = `https://dict.youdao.com/dictvoice?type=2&audio=${word}`\n  var p = new Promise(function(resolve, reject) {\n    var ret = GM_xmlhttpRequest({\n      method: \"GET\",\n      url: soundUrl,\n      responseType: 'arraybuffer',\n      onload: function(res) {\n        try {\n          context.decodeAudioData(res.response, function(buffer) {\n            resolve(buffer);\n          })\n        } catch(e) {\n          reject(e);\n        }\n      }\n    });\n  });\n  p.then(playSound, function(e) {\n    console.log(e);\n  });\n}\n```\n\n一般的观点是，凡是关系到异步返回值的时候，都应该尽量使用Promise，保证[回调只被执行一次、更好的错误处理、更明晰的流程结构](https://github.com/getify/You-Dont-Know-JS/blob/master/async%20&%20performance/ch3.md)。\n\nPromise和Generator现在常作为将来ES7中`async/await`的过渡。比如著名的`co`模块，以下是一个简化`co`实现\n\n```javascript\nfunction co(g) {\n  return function() {\n    var it = g.apply(this, arguments);\n\n    function handle(result) {\n      if (result.done)\n        return result.value;\n      return result.value.then(function(res) {\n        return handle(it.next(res))\n      })\n    }\n    return handle(it.next())\n  }\n}\n```\n\n简单来说，就是对`generator`中每个`yield`出一个promise时，检查这个promise是否已经完成，\n完成就返回值。没有就在该promise上注册回调让其把完成后的值传回`generator`并等待`generator`再返回下一个Promise。\n\n好绕是不是?我跑题了抱歉。\n\n## Template String\n\n其实上面的例子已经用到这个特性了。再举个例子，Coffeescript中可以这样写正则：\n\n```python\nOPERATOR = /// ^ (\n  ?: [-=]>             # function\n   | [-+*/%<>&|^!?=]=  # compound assign / compare\n   | >>>=?             # zero-fill right shift\n   | ([-+:])\\1         # doubles\n   | ([&|<>])\\2=?      # logic / shift\n   | \\?\\.              # soak access\n   | \\.{2,3}           # range or splat\n) ///\n```\n\n\n非常方便不是？虽然我开始是在[nltk](www.nltk.org/book/ch03.html)中看到了这个功能，\n\n```python\ntext = 'That U.S.A. poster-print costs $12.40...'\npattern = r'''(?x)    # set flag to allow verbose regexps\n    ([A-Z]\\.)+        # abbreviations, e.g. U.S.A.\n  | \\w+(-\\w+)*        # words with optional internal hyphens\n  | \\$?\\d+(\\.\\d+)?%?  # currency and percentages, e.g. $12.40, 82%\n  | \\.\\.\\.            # ellipsis\n  | [][.,;\"'?():-_`]  # these are separate tokens;\n'''\nnltk.regexp_tokenize(text, pattern)\n['That', 'U.S.A.', 'poster-print', 'costs', '$12.40', '...']\n```\n\n想了想如何在js中自己实现，忽然想到了template string这个特性。\n\n```javascript\nfunction r(strings) {\n  let returnS;\n  // remove all space;\n  returnS = strings[0];\n  let comment = /\\/\\/.*\\n/g;\n  returnS = returnS.replace(comment, \"\");\n  returnS = returnS.replace(/\\s+/g,\"\");\n  return returnS;\n}\n\nr`\n    ([A-Z]\\.)+        // abbreviations, e.g. U.S.A.\n  | \\w+(-\\w+)*        // words with optional internal hyphens\n  | \\$?\\d+(\\.\\d+)?%?  // currency and percentages, e.g. $12.40, 82%\n  | \\.\\.\\.            // ellipsis\n  | [][.,;\"'?():-_\\`] // these are separate tokens; includes ], [\n`\n```\n\n这里用到了[Tagged template strings](http://devdocs.io/javascript/template_strings)的特性。\n\n另外，如果是多行连续文本时也应该使用template string。\n\n## class\n\n从本质上讲，javascript中的所有面向对象机制都是建构在原型链上的，但class这种语法糖也能比较方便。在coffeescript中我觉得那种浓烈ruby风的写法更合心意一些，`class`关键字总有些不怎么顺手的地方，比如 _设置类静态变量_ 和有争议的 _mixin_ 。参照nltk wordnet corpus reader类的时候也简单实践了下class关键字、继承等的使用。简单使用还是挺顺手的。\n\n```javascript\nclass Synset extends _WordNetObject {\n  /* lemma.pos.number to get a synset */\n  constructor() {\n    super();\n    // initialized by the Reader\n    this._name = null;\n    this._offset = null;\n    this._lexname = null; // lexicographer file e.g. noun.animal\n    this._pos = null;\n    ...\n```\n\n## destructuring assign\n\n这是，非常好用的语法糖。终于可以\n\n```javascript\n[a, b] = [1, 2];\n```\n\n## Spread Operator\n\n各种语法糖，处理rest parameter时省心很多，而且返回的是一个真正的Array对象。比较有意思的一个例子是，有次见有人讨论如何把`Math.min`应用到数组上。他说到javascript高级程序设计上的例子：\n\n```javascript\nfunction min(array) {\n  return Math.min.apply(Math, array);\n}\n```\n\n认为应该把`this`绑定到`null`而不是`Math`，于是我才知道`apply`时还是要小心不要污染全局变量空间。。。不过这个例子，我去翻了下[v8的math.js](https://github.com/v8/v8/blob/44c44521ae11859478b42004f57ea93df52526ee/src/js/math.js#L110-135)和[spidermonkey的Math实现](https://github.com/ricardoquesada/Spidermonkey/blob/master/js/src/jsmath.cpp#L593-L616)，都不关this什么事，所以，我觉得，爱绑定啥都行。。。\n\n关键在于，有了spread operator之后\n\n```javascript\nMath.min(...array);\n```\n\n就行了。这些类似的应用场景很多的，比如打印数组中每个成员\n\n```javascript\nconsole.log(...array);\n```\n\n少写多少代码：）\n\n## Arrow Function\n\n在前面的例子中你应该已经见到过，箭头函数让书写匿名函数(lambda)变得异常方便(少打很多字)，除了不能用箭头函数写一个generator这个设定有些意外。\n\n```javascript\n(v=>v+1)(3)\n```\n\n另外，箭头函数的this是提前绑定到所在词法作用域内的(和调用者无关、apply等指定的`this`都无关)，有兴趣的同学大概可以去看看v8和SpiderMonkey怎么实现的。\n\n## Proxy\n\n差点忘了这个，因为，目前，截至到本文发稿，v8并不支持标准中的新特性(`--harmony_proxies`开启的是已废弃的Proxy API)，所以node也不支持。firefox倒是支持非常好哈哈。\n\n在python中，标准库中有个较`defaultdict`的东西。有什么作用看看下面的例子就知道了。事实上，nltk wordnet corpus reader生成映射的时候很依赖这个功能。\n\n```\nIn [3]: from collections import defaultdict\n\nIn [4]: expanded_dict = defaultdict(dict)\n\nIn [5]: expanded_dict['a']['b'] = 1\n\nIn [6]: expanded_dict\nOut[6]: defaultdict(<type 'dict'>, {'a': {'b': 1}})\n\nIn [7]: dict['a']['b']\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-7-07dd2e624242> in <module>()\n----> 1 dict['a']['b']\n\nTypeError: 'type' object has no attribute '__getitem__'\n```\n\n显然我们不想让不存在的东西报错，我们也不想每次都写个if语句判断是吧。\n\n```python\nif not dct['a']:\n    dct['a'] = {}\ndct['a']['b'] = 1\n```\n\n如果你知道`dct`中有哪些键当然也能全首先赋成字典，但是，很多情况下你并不知道有哪些键，还得依靠if来判断。`defaultdict`优雅的解决了这个问题。\n\n遗憾的是，javascript中没有这种东西。忽然想到了[ES6 in Depth: Proxies](https://hacks.mozilla.org/2015/07/es6-in-depth-proxies-and-reflect/)中的例子，想到可以依靠这个特性自己实现一个`defaultdict`。\n\n```javascript\nfunction Defaultdict() {\n  handler = {\n    get: function (target, prop, receiver) {\n      if (!(prop in target)) {\n        target[prop] = {};\n      }\n      return target[prop];\n    }\n  }\n  var p = new Proxy(this, handler);\n  return p;\n}\n\nlet expandedDct = new Defaultdict();\nexpandedDct.a.b = 1;\nexpandedDct.c.d = 2;\nconsole.log(expandedDct.a.b)\nconsole.log(Object.keys(expandedDct));\n```\n\n目前只有firefox支持标准的Proxy API。当然V8/node中可以polyfill出来，请自行github。\n\n用`Proxy`可以结合`Map`来实现`Map`版本的DefaultMap哈哈。\n\n<p style=\"color:red;\">PS: 浏览器调试工具会调用一些方法。比如，你新建一个`expandedDct`之后，如果在firebug中想用`.`来查看变量，会对其调用很多方法。。。结果就是`expandedDct`多了很多firebug探查对象属性用到的函数名。。。我在这个问题上纠结了几乎两个小时没明白为啥多了这些奇怪的键而且一会儿有一会儿没。切切注意！！</p>\n\n```javascript\n> Object.keys(expandedDct)\n[\"a\", \"c\", \"length\", \"fullPath\", \"fileSize\", \"header\", \"body\", \"getSourceLink\"]\n```\n\n## 总结\n\n以上，就是最近感觉比较有意思的一些ES6特性，就这样吧。\n\nHave fun！\n",metaData:{layout:"post",title:"The ES6 Features I Use These Days",excerpt:"",category:"javascript",tags:["javascript","ES2015"],disqus:!0}}}});