webpackJsonp([155,170],{549:function(n,o){n.exports={rawContent:'\n\n## Powerful format\n\nformat又是一个在common lisp中灵活“过头”，争议超多的一个宏。它十分强大。\n\n基本用法如下\n\n```cl\n(princ (reverse (format nil "Add onion rings for only ~$ dollars more!" 1.5))) \n;;;Control sequences for printing lisp values\n;;(prin1 "foo")\n(format t "I am printing ~s in the middle of this sentence" "foo")\n;;(princ "foo")\n(format t "I am printing ~a in the middle of this sentence" "foo")\n;;第一个参数,右边补白\n(format t "I am printing ~10a within ten spaces of room." "foo")\n;;第二个参数，分成3部分，补白9格\n(format t "I am printing ~10,3a within ten (or more) spaces of room." "foo")\n;;第三个参数，右边补白4格\n(format t "I am printing ~,,4a in the middle of this sentence." "foo")\n;;第四个参数，补充符号\n(format t "The world ~,,4,\'!a feels very important." "foo")\n(format t "The world ~,,4,\'!@a feels very important." "foo")\n;;;Control Sequences for formatting numbers\n;;Integers\n(format t "The number 1000 in hexadrcimal is ~x" 1000)\n(format t "The number 1000 in hexadrcimal is ~b" 1000)\n(format t "The number 1000 in hexadrcimal is ~d" 1000)\n;digit group separators\n(format t "Numbers with commas in them are ~:d times better." 1000000)\n(format t "I am printing ~10d within ten spaces of room." 1000000)\n(format t "I am printing ~10,\'xd within ten spaces of room." 1000000)\n;;;Control Sequences for formatting Floating-point numbers\n;;default\n(format t "PI can be estimated as ~4f" 3.141593)\n;;小数点后数位\n(format t "PI can be estimated as ~,4f" pi)\n;;Percentage\n(format t "Percentages are ~,,2f percent better than fractions" 0.77)\n;;Format currency\n(format t "I wish I had ~$ dollars in my bank account." 1000000.2)\n;;;Print multiple lines of output\n;;terpri\n(progn (princ 22)\n       (terpri)\n       (princ 33))\n;;fresh-line\n(progn (princ 22)\n       (fresh-line)\n       (fresh-line)\n       (princ 33))\n;;~% like terpri\n;;~& like fresh-line\n(progn (format t "This is on one line ~%")\n       (format t "~%This is on another line")) \n(progn (format t "This is on one line ~&")\n       (format t "~&This is on another line"))\n;;there can be a number in front of them\n(format t "this will print ~5%on two lines spread far apart")\n(format t "this will print ~5&on two lines spread far apart")\n;;;Justifying output\n;;for example a function\n(defun random-animal ()\n  (nth (random 5) \'("dog" "tick" "tiger" "walrus" "kangaroo")))\n;;equally width\n(loop repeat 10\n      do (format t "~5t~a ~15t~a ~25t~a~%"\n                 (random-animal)\n                 (random-animal)\n                 (random-animal)))\n;;equally apart\n(loop repeat 10\n      do (format t "~30<~a~;~a~;~a~>~%"\n                 (random-animal)\n                 (random-animal)\n                 (random-animal)))\n;;center\n(loop repeat 10\n      do (format t "~30:@<~a~>~%" (random-animal)))\n(loop repeat 10\n      do (format t "~30:@<~a~;~a~;~a~>~%"\n                 (random-animal)\n                 (random-animal)\n                 (random-animal)))\n;;still wavy?to make it like this\n(loop repeat 10\n      do (format t "~10:@<~a~>~10:@<~a~>~10:@<~a~>~%"\n                 (random-animal)\n                 (random-animal)\n                 (random-animal)))\n;;;Iterating Through Lists Using Control Sequences\n;;Lets create a list of animals\n(defparameter *animals* (loop repeat 10 collect (random-animal)))\n;;loop through sequenses\n(format t "~{I see a ~a! ~%~}" *animals*) \n;;not only one item\n(format t "~{I see a ~a... or was it a ~a?~%~}" *animals*)\n;;;A crazy formatting trick for creating pretty tables of data\n(format t "|~{~<|~%|~,33:;~2d ~>~}|"\n        (loop for x below 100 collect x))\n```\n\n可以看到，format的参数多的……而且像perl一样有很多“奇怪”的符号。\n\n## Attack by robots\n\n让我们接下来看看一个被作者称作可怕的游戏，It\'s really drive me crazy!!\n\n```cl\n;;;整个界面大小为16x64，产生个1024长度序列\n(defun robots ()\n  (loop named main;便于跳出\n     ;;方向\n     with directions = \'((q . -65) (w . -64) (e . -63) (a . -1)\n                         (d .   1) (z .  63) (x .  64) (c . 65))\n     ;;初始位置\n     for pos = 544\n     then (progn (format t "~%qwe/asd/zxc to move, (t)eleport, (l)eave:")\n                 (force-output);clean any output not waiting return\n                 (let* ((c (read))\n                        (d (assoc c directions)))\n                   (cond (d (+ pos (cdr d)))\n                         ((eq \'t c) (random 1024))\n                         ((eq \'l c) (return-from main \'bye))\n                         (t pos))))\n     ;;获得monster的位置\n     for monsters = (loop repeat 10\n                          collect (random 1024))\n     then (loop for mpos in monsters\n                collect (if (> (count mpos monsters) 1)\n                          mpos\n                          ;;都走了一遍。\n                          (cdar (sort (loop for (k . d) in directions\n                                            for new-mpos = (+ mpos d)\n                                            ;行与列距离和与新位置cons                                \n                                            collect (cons (+ (abs (- (mod new-mpos 64) \n                                                                     (mod pos 64)))\n                                                             (abs (- (ash new-mpos -6)\n                                                                     (ash pos -6))))\n                                                          new-mpos))\n                                      \'<\n                                      :key #\'car))))\n     when (loop for mpos in monsters\n                always (> (count mpos monsters) 1))\n     return \'player-wins\n     do (format t\n                "~%|~{~<|~%|~,65:;~A~>~}|"\n                (loop for p \n                      below 1024\n                      collect (cond ((member p monsters) \n                                     (cond ((= p pos) (return-from main \'player-loses))\n                                           ((> (count p monsters) 1) #\\#)\n                                           (t #\\A)))\n                                    ((= p pos) \n                                     #\\@)\n                                    (t \n                                     #\\ ))))))\n\n```\n\n整个游戏就一个函数，由loop和format这种强大的lisp异类来完成。\n\n## 写在最后\n\n挺好玩的一个游戏。挺难理解的代码……\n\n为了看懂又回头看看作者的loop周期表，再次见识了format和loop的强大之处，也感受到了它们的复杂。\n',metaData:{layout:"post",title:"Attack of the Robots",excerpt:"Yet another robots game written with loop and format",category:"lisp",tags:["land-of-lisp"],disqus:!0}}}});
//# sourceMappingURL=155.b84107711a7f81edd510.js.map