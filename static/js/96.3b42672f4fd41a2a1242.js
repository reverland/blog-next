webpackJsonp([96,170],{256:function(n,e){n.exports={rawContent:'\n\n# 高级Python结构\n\n**原谅渣翻译，可能仅仅是给我自己看的。本来多年(也就几个月吧)之前将此文投递到OSChina翻译频道结果被以代码太多为由被拒，于是译者只好用自己的渣英语渣水平翻译给自己看了……，期待各路`大婶`们指正……**\n\n翻译自[http://scipy-lectures.github.com/advanced/advanced\\_python/index.html](http://scipy-lectures.github.com/advanced/advanced_python/index.html)\n\n作者:\tZbigniew Jędrzejewski-Szmek\n\n这章有关Python中被认为高级的特性——就是说并不是每个语言都有的，也是说它们可能在更复杂的程序或库中更有用，但不是说特别特殊或特别复杂。\n\n强调这点很重要：这一章仅仅关于语言自身——关于辅之以Python的标准库功能的特殊语法所支持的特性，不包括那些智能的外部模块实现。\n\n在开发Python程序语言的过程中，它的语法，独一无二。因为它非常透明。建议的更改通过不同的角度评估并在公开邮件列表讨论，最终决定考虑到假设用例的重要性、添加更多特性的负担，其余语法的一致性、是否建议的变种易于读写和理解之间的平衡。这个过程由Python Enhancement Proposals([PEPs](http://www.python.org/dev/peps/))的形式规范。最终这一章节中描述的特性在证明它们确实解决实际问题并且使用起来尽可能简单后被添加。\n\n---\n**目录**\n\n* toc\n{: toc}\n\n---\n\n## 迭代器(Iterators), 生成表达式(generator expressions)和生成器(generators)\n\n### 迭代器\n\n> **简单**\n> \n> 重复工作是浪费，将不同“土生土长”的方法替换为标准特性换来的是更加易于阅读和操作。\n> \n> Guido van Rossum — [Adding Optional Static Typing to Python](http://www.artima.com/weblogs/viewpost.jsp?thread=86641)\n\n\n\n迭代器是依附于[迭代协议](http://docs.python.org/dev/library/stdtypes.html#iterator-types)的对象——基本意味它有一个`next`方法(method)，当调用时，返回序列中的下一个项目。当无项目可返回时，引发(raise)`StopIteration`异常。\n\n迭代对象允许一次循环。它保留单次迭代的状态(位置)，或从另一个角度讲，每次循环序列都需要一个迭代对象。这意味我们可以同时迭代同一个序列不只一次。将迭代逻辑和序列分离使我们有更多的迭代方式。\n\n调用一个容器(container)的`__iter__`方法创建迭代对象是掌握迭代器最直接的方式。`iter`函数为我们节约一些按键。\n\n```python\n>>> nums = [1,2,3]      # note that ... varies: these are different objects\n>>> iter(nums)                           \n<listiterator object at ...>\n>>> nums.__iter__()                      \n<listiterator object at ...>\n>>> nums.__reversed__()                  \n<listreverseiterator object at ...>\n\n>>> it = iter(nums)\n>>> next(it)            # next(obj) simply calls obj.next()\n1\n>>> it.next()\n2\n>>> next(it)\n3\n>>> next(it)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nStopIteration\n```\n\n当在循环中使用时，`StopIteration`被接受并停止循环。但通过显式引发(invocation)，我们看到一旦迭代器元素被耗尽，存取它将引发异常。\n\n使用`for...in`循环也使用`__iter__`方法。这允许我们透明地开始对一个序列迭代。但是如果我们已经有一个迭代器，我们想在for循环中能同样地使用它们。为了实现这点，迭代器除了`next`还有一个方法`__iter__`来返回迭代器自身(self)。\n\nPython中对迭代器的支持无处不在：标准库中的所有序列和无序容器都支持。这个概念也被拓展到其它东西：例如`file`对象支持行的迭代。\n\n```python\n>>> f = open(\'/etc/fstab\')\n>>> f is f.__iter__()\nTrue\n```\n\n`file`自身就是迭代器，它的`__iter__`方法并不创建一个单独的对象：仅仅单线程的顺序读取被允许。\n\n### 生成表达式\n\n第二种创建迭代对象的方式是通过 _生成表达式(generator expression)_ ，列表推导(list comprehension)的基础。为了增加清晰度，生成表达式总是封装在括号或表达式中。如果使用圆括号，则创建了一个生成迭代器(generator iterator)。如果是方括号，这一过程被‘短路’我们获得一个列表`list`。\n\n```python\n>>> (i for i in nums)                    \n<generator object <genexpr> at 0x...>\n>>> [i for i in nums]\n[1, 2, 3]\n>>> list(i for i in nums)\n[1, 2, 3]\n```\n\n在Python 2.7和 3.x中列表表达式语法被扩展到 _字典和集合表达式_。一个集合`set`当生成表达式是被大括号封装时被创建。一个字典`dict`在表达式包含`key:value`形式的键值对时被创建：\n\n```python\n>>> {i for i in range(3)}   \nset([0, 1, 2])\n>>> {i:i**2 for i in range(3)}   \n{0: 0, 1: 1, 2: 4}\n```\n\n如果您不幸身陷古老的Python版本中，这个语法有点糟：\n\n```python\n>>> set(i for i in \'abc\')\nset([\'a\', \'c\', \'b\'])\n>>> dict((i, ord(i)) for i in \'abc\')\n{\'a\': 97, \'c\': 99, \'b\': 98}\n```\n\n生成表达式相当简单，不用多说。只有一个陷阱值得提及：在版本小于3的Python中索引变量(`i`)会泄漏。\n\n### 生成器\n\n> **生成器**\n> \n> 生成器是产生一列结果而不是单一值的函数。\n> \n> David Beazley — [A Curious Course on Coroutines and Concurrency](http://www.dabeaz.com/coroutines/)\n\n第三种创建迭代对象的方式是调用生成器函数。一个 _生成器(generator)_ 是包含关键字`yield`的函数。值得注意，仅仅是这个关键字的出现完全改变了函数的本质：`yield`语句不必引发(invoke)，甚至不必可接触。但让函数变成了生成器。当一个函数被调用时，其中的指令被执行。而当一个生成器被调用时，执行在其中第一条指令之前停止。生成器的调用创建依附于迭代协议的生成器对象。就像常规函数一样，允许并发和递归调用。\n\n当`next`被调用时，函数执行到第一个`yield`。每次遇到`yield`语句获得一个作为`next`返回的值，在`yield`语句执行后，函数的执行又被停止。\n\n```python\n>>> def f():\n...   yield 1\n...   yield 2\n>>> f()                                   \n<generator object f at 0x...>\n>>> gen = f()\n>>> gen.next()\n1\n>>> gen.next()\n2\n>>> gen.next()\nTraceback (most recent call last):\n File "<stdin>", line 1, in <module>\nStopIteration\n```\n\n让我们遍历单个生成器函数调用的整个历程。\n\n```python\n>>> def f():\n...   print("-- start --")\n...   yield 3\n...   print("-- middle --")\n...   yield 4\n...   print("-- finished --")\n>>> gen = f()\n>>> next(gen)\n-- start --\n3\n>>> next(gen)\n-- middle --\n4\n>>> next(gen)                            \n-- finished --\nTraceback (most recent call last):\n ...\nStopIteration\n```\n\n相比常规函数中执行`f()`立即让`print`执行，`gen`不执行任何函数体中语句就被赋值。只有当`gen.next()`被`next`调用，直到第一个`yield`部分的语句才被执行。第二个语句打印`-- middle --`并在遇到第二个yield时停止执行。第三个`next`打印`-- finished --`并且到函数末尾，因为没有`yield`，引发了异常。\n\n当函数yield之后控制返回给调用者后发生了什么？每个生成器的状态被存储在生成器对象中。从这点看生成器函数，好像它是运行在单独的线程，但这仅仅是假象：执行是严格单线程的，但解释器保留和存储在下一个值请求之间的状态。[^1]\n\n为何生成器有用？正如关于迭代器这部分强调的，生成器函数只是创建迭代对象的又一种方式。一切能被`yield`语句完成的东西也能被`next`方法完成。然而，使用函数让解释器魔力般地创建迭代器有优势。一个函数可以比需要`next`和`__iter__`方法的类定义短很多。更重要的是，相比不得不对迭代对象在连续`next`调用之间传递的实例(instance)属性来说，生成器的作者能更简单的理解局限在局部变量中的语句。\n\n还有问题是为何迭代器有用？当一个迭代器用来驱动循环，循环变得简单。迭代器代码初始化状态，决定是否循环结束，并且找到下一个被提取到不同地方的值。这凸显了循环体——最值得关注的部分。除此之外，可以在其它地方重用迭代器代码。\n\n### 双向通信\n\n每个`yield`语句将一个值传递给调用者。这就是为何[PEP 255](http://www.python.org/dev/peps/pep-0255)引入生成器(在Python2.2中实现)。但是相反方向的通信也很有用。一个明显的方式是一些外部(extern)语句，或者全局变量或共享可变对象。通过将先前无聊的`yield`语句变成表达式，直接通信因[PEP 342](http://www.python.org/dev/peps/pep-0342)成为现实(在2.5中实现)。当生成器在yield语句之后恢复执行时，调用者可以对生成器对象调用一个方法，或者传递一个值 _给_ 生成器，然后通过`yield`语句返回，或者通过一个不同的方法向生成器注入异常。\n\n第一个新方法是`send(value)`，类似于`next()`，但是将`value`传递进作为yield表达式值的生成器中。事实上，`g.next()`和`g.send(None)`是等效的。\n\n第二个新方法是`throw(type, value=None, traceback=None)`，等效于在yield语句处\n\n```python\nraise type, value, traceback\n```\n\n不像`raise`(从执行点立即引发异常)，`throw()`首先恢复生成器，然后仅仅引发异常。选用单次throw就是因为它意味着把异常放到其它位置，并且在其它语言中与异常有关。\n\n当生成器中的异常被引发时发生什么？它可以或者显式引发，当执行某些语句时可以通过`throw()`方法注入到yield语句中。任一情况中，异常都以标准方式传播：它可以被`except`和`finally`捕获，或者造成生成器的中止并传递给调用者。\n\n因完整性缘故，值得提及生成器迭代器也有`close()`方法，该方法被用来让本可以提供更多值的生成器立即中止。它用生成器的`__del__`方法销毁保留生成器状态的对象。\n\n让我们定义一个只打印出通过send和throw方法所传递东西的生成器。\n\n```python\n>>> import itertools\n>>> def g():\n...     print \'--start--\'\n...     for i in itertools.count():\n...         print \'--yielding %i--\' % i\n...         try:\n...             ans = yield i\n...         except GeneratorExit:\n...             print \'--closing--\'\n...             raise\n...         except Exception as e:\n...             print \'--yield raised %r--\' % e\n...         else:\n...             print \'--yield returned %s--\' % ans\n\n>>> it = g()\n>>> next(it)\n--start--\n--yielding 0--\n0\n>>> it.send(11)\n--yield returned 11--\n--yielding 1--\n1\n>>> it.throw(IndexError)\n--yield raised IndexError()--\n--yielding 2--\n2\n>>> it.close()\n--closing--\n```\n\n**注意： `next`还是`__next__`?**\n\n**在Python 2.x中，接受下一个值的迭代器方法是`next`，它通过全局函数`next`显式调用，意即它应该调用`__next__`。就像全局函数`iter`调用`__iter__`。这种不一致在Python 3.x中被修复，`it.next`变成了`it.__next__`。对于其它生成器方法——`send`和`throw`情况更加复杂，因为它们不被解释器隐式调用。然而，有建议语法扩展让`continue`带一个将被传递给循环迭代器中`send`的参数。如果这个扩展被接受，可能`gen.send`会变成`gen.__send__`。最后一个生成器方法`close`显然被不正确的命名了，因为它已经被隐式调用。**\n\n### 链式生成器\n\n**注意： 这是[PEP 380](http://www.python.org/dev/peps/pep-0380)的预览(还未被实现，但已经被Python3.3接受)[^2]**\n\n比如说我们正写一个生成器，我们想要yield一个第二个生成器——一个子生成器(subgenerator)——生成的数。如果仅考虑产生(yield)的值，通过循环可以不费力的完成：\n\n```python\nsubgen = some_other_generator()\nfor v in subgen:\n    yield v\n```\n\n然而，如果子生成器需要调用`send()`、`throw()`和`close()`和调用者适当交互的情况下，事情就复杂了。`yield`语句不得不通过类似于前一章节部分定义的`try...except...finally`结构来保证“调试”生成器函数。这种代码在[PEP 380](http://www.python.org/dev/peps/pep-0380#id13)中提供，现在足够拿出将在Python 3.3中引入的新语法了：\n\n```python\nyield from some_other_generator()\n```\n\n像上面的显式循环调用一样，重复从`some_other_generator`中产生值直到没有值可以产生，但是仍然向子生成器转发`send`、`throw`和`close`。\n\n## 装饰器\n\n> **总结**\n> \n> 这个语言中令人激动的特性几乎充满歉意的，考虑到它可能没这么有用。\n> \n>\tBruce Eckel — An Introduction to Python Decorators\n\n因为函数或类都是对象，它们也能被四处传递。它们又是可变对象，可以被更改。在函数或类对象创建后但绑定到名字前更改之的行为为装饰(decorator)。[^4]\n\n“装饰器”后隐藏了两种意思——一是函数起了装饰作用，例如，执行真正的工作，另一个是依附于装饰器语法的表达式，例如，at符号和装饰函数的名称。\n\n函数可以通过函数装饰器语法装饰：\n\n```python\n@decorator             # ②\ndef function():        # ①\n    pass\n```\n\n- 函数以标准方式定义。①\n- 以`@`做为定义为装饰器函数前缀的表达式②。在 @ 后的部分必须是简单的表达式，通常只是函数或类的名字。这一部分先求值，在下面的定义的函数准备好后，装饰器被新定义的函数对象作为单个参数调用。装饰器返回的值附着到被装饰的函数名。\n\n装饰器可以应用到函数和类上。对类语义很明晰——类定义被当作参数来调用装饰器，无论返回什么都赋给被装饰的名字。\n\n在装饰器语法实现前([PEP 318](http://www.python.org/dev/peps/pep-0318))，通过将函数和类对象赋给临时变量然后显式调用装饰器然后将返回值赋给函数名，可以完成同样的事。这似乎要打更多的字，也确实装饰器函数名用了两次同时临时变量要用至少三次，很容易出错。以上实例相当于：\n\n```python\ndef function():                  # ①\n    pass\nfunction = decorator(function)   # ②\n```\n\n装饰器可以堆栈(stacked)——应用的顺序是从底到上或从里到外。就是说最初的函数被当作第一次参数器的参数，无论返回什么都被作为第二个装饰器的参数……无论最后一个装饰器返回什么都被依附到最初函数的名下。\n\n装饰器语法因其可读性被选择。因为装饰器在函数头部前被指定，显然不是函数体的一部分，它只能对整个函数起作用。以@为前缀的表达式又让它明显到不容忽视(根据PEP叫在您脸上……：）)。当多个装饰器被应用时，每个放在不同的行非常易于阅读。\n\n### 代替和调整原始对象\n\n装饰器可以或者返回相同的函数或类对象或者返回完全不同的对象。第一种情况中，装饰器利用函数或类对象是可变的添加属性，例如向类添加文档字符串(docstring).装饰器甚至可以在不改变对象的情况下做有用的事，例如在全局注册表中注册装饰的类。在第二种情况中，简直无所不能：当什么不同的东西取代了被装饰的类或函数，新对象可以完全不同。然而这不是装饰器的目的：它们意在改变装饰对象而非做不可预料的事。因此当一个函数在装饰时被完全替代成不同的函数时，新函数通常在一些准备工作后调用原始函数。同样，当一个类被装饰成一个新类时，新类通常源于被装饰类。当装饰器的目的是“每次都”做什么，像记录每次对被装饰函数的调用，只有第二类装饰器可用。另一方面，如果第一类足够了，最好使用它因为更简单。[^3]\n\n### 实现类和函数装饰器\n\n对装饰器惟一的要求是它能够单参数调用。这意味着装饰器可以作为常规函数或带有`__call__`方法的类的实现，理论上，甚至lambda函数也行。\n\n让我们比较函数和类方法。装饰器表达式(@后部分)可以只是名字。只有名字的方法很好(打字少，看起来整洁等)，但是只有当无需用参数定制装饰器时才可能。被写作函数的装饰器可以用以下两种方式：\n\n```python\n>>> def simple_decorator(function):\n...   print "doing decoration"\n...   return function\n>>> @simple_decorator\n... def function():\n...   print "inside function"\ndoing decoration\n>>> function()\ninside function\n\n>>> def decorator_with_arguments(arg):\n...   print "defining the decorator"\n...   def _decorator(function):\n...       # in this inner function, arg is available too\n...       print "doing decoration,", arg\n...       return function\n...   return _decorator\n>>> @decorator_with_arguments("abc")\n... def function():\n...   print "inside function"\ndefining the decorator\ndoing decoration, abc\n>>> function()\ninside function\n```\n\n这两个装饰器属于返回被装饰函数的类别。如果它们想返回新的函数，需要额外的嵌套，最糟的情况下，需要三层嵌套。\n\n```python\n>>> def replacing_decorator_with_args(arg):\n...   print "defining the decorator"\n...   def _decorator(function):\n...       # in this inner function, arg is available too\n...       print "doing decoration,", arg\n...       def _wrapper(*args, **kwargs):\n...           print "inside wrapper,", args, kwargs\n...           return function(*args, **kwargs)\n...       return _wrapper\n...   return _decorator\n>>> @replacing_decorator_with_args("abc")\n... def function(*args, **kwargs):\n...     print "inside function,", args, kwargs\n...     return 14\ndefining the decorator\ndoing decoration, abc\n>>> function(11, 12)\ninside wrapper, (11, 12) {}\ninside function, (11, 12) {}\n14\n```\n\n`_wrapper`函数被定义为接受所有位置和关键字参数。通常我们不知道哪些参数被装饰函数会接受，所以wrapper将所有东西都创递给被装饰函数。一个不幸的结果就是显式参数很迷惑人。\n\n相比定义为函数的装饰器，定义为类的复杂装饰器更简单。当对象被创建，`__init__`方法仅仅允许返回`None`，创建的对象类型不能更改。这意味着当装饰器被定义为类时，使用无参数的形式没什么意义：最终被装饰的对象只是装饰类的一个实例而已，被构建器(constructor)调用返回，并不非常有用。讨论在装饰表达式中给出参数的基于类的装饰器，`__init__`方法被用来构建装饰器。\n\n```python\n>>> class decorator_class(object):\n...   def __init__(self, arg):\n...       # this method is called in the decorator expression\n...       print "in decorator init,", arg\n...       self.arg = arg\n...   def __call__(self, function):\n...       # this method is called to do the job\n...       print "in decorator call,", self.arg\n...       return function\n>>> deco_instance = decorator_class(\'foo\')\nin decorator init, foo\n>>> @deco_instance\n... def function(*args, **kwargs):\n...   print "in function,", args, kwargs\nin decorator call, foo\n>>> function()\nin function, () {}\n```\n\n相对于正常规则([PEP 8](http://www.python.org/dev/peps/pep-0008))由类写成的装饰器表现得更像函数，因此它们的名字以小写字母开始。\n\n事实上，创建一个仅返回被装饰函数的新类没什么意义。对象应该有状态，这种装饰器在装饰器返回新对象时更有用。\n\n```python\n>>> class replacing_decorator_class(object):\n...   def __init__(self, arg):\n...       # this method is called in the decorator expression\n...       print "in decorator init,", arg\n...       self.arg = arg\n...   def __call__(self, function):\n...       # this method is called to do the job\n...       print "in decorator call,", self.arg\n...       self.function = function\n...       return self._wrapper\n...   def _wrapper(self, *args, **kwargs):\n...       print "in the wrapper,", args, kwargs\n...       return self.function(*args, **kwargs)\n>>> deco_instance = replacing_decorator_class(\'foo\')\nin decorator init, foo\n>>> @deco_instance\n... def function(*args, **kwargs):\n...   print "in function,", args, kwargs\nin decorator call, foo\n>>> function(11, 12)\nin the wrapper, (11, 12) {}\nin function, (11, 12) {}\n```\n\n像这样的装饰器可以做任何事，因为它能改变被装饰函数对象和参数，调用被装饰函数或不调用，最后改变返回值。\n\n### 复制原始函数的文档字符串和其它属性\n\n当新函数被返回代替装饰前的函数时，不幸的是原函数的函数名，文档字符串和参数列表都丢失了。这些属性可以部分通过设置`__doc__`(文档字符串)，`__module__`和`__name__`(函数的全称)、`__annotations__`(Python 3中关于参数和返回值的额外信息)移植到新函数上，这些工作可通过`functools.update_wrapper`自动完成。\n\n```python\n>>> import functools\n>>> def better_replacing_decorator_with_args(arg):\n...   print "defining the decorator"\n...   def _decorator(function):\n...       print "doing decoration,", arg\n...       def _wrapper(*args, **kwargs):\n...           print "inside wrapper,", args, kwargs\n...           return function(*args, **kwargs)\n...       return functools.update_wrapper(_wrapper, function)\n...   return _decorator\n>>> @better_replacing_decorator_with_args("abc")\n... def function():\n...     "extensive documentation"\n...     print "inside function"\n...     return 14\ndefining the decorator\ndoing decoration, abc\n>>> function                           \n<function function at 0x...>\n>>> print function.__doc__\nextensive documentation\n```\n\n一件重要的东西是从可迁移属性列表中所缺少的：参数列表。参数的默认值可以通过`__defaults__`、`__kwdefaults__`属性更改，但是不幸的是参数列表本身不能被设置为属性。这意味着`help(function)`将显式无用的参数列表，使使用者迷惑不已。一个解决此问题有效但是丑陋的方式是使用`eval`动态创建wrapper。可以使用外部`external`模块自动实现。它提供了对`decorator`装饰器的支持，该装饰器接受wrapper并将之转换成保留函数签名的装饰器。\n\n综上，装饰器应该总是使用`functools.update_wrapper`或者其它方式赋值函数属性。\n\n### 标准库中的示例\n\n首先要提及的是标准库中有一些实用的装饰器，有三种装饰器：\n\n- `classmethod`让一个方法变成“类方法”，即它能够无需创建实例调用。当一个常规方法被调用时，解释器插入实例对象作为第一个参数`self`。当类方法被调用时，类本身被给做第一个参数，一般叫`cls`。\n\n    类方法也能通过类命名空间读取，所以它们不必污染模块命名空间。类方法可用来提供替代的构建器(constructor):\n\n    ```python\n    class Array(object):\n        def __init__(self, data):\n            self.data = data\n    \n        @classmethod\n        def fromfile(cls, file):\n            data = numpy.load(file)\n            return cls(data)\n    ```\n  \n  这比用一大堆标记的`__init__`简单多了。\n\n- `staticmethod`应用到方法上让它们“静态”，例如，本来一个常规函数，但通过类命名空间存取。这在函数仅在类中需要时有用(它的名字应该以`_`为前缀)，或者当我们想要用户以为方法连接到类时也有用——虽然对实现本身不必要。\n\n- `property`是对getter和setter问题Python风格的答案。通过`property`装饰的方法变成在属性存取时自动调用的getter。\n\n    ```python\n    >>> class A(object):\n    ...   @property\n    ...   def a(self):\n    ...     "an important attribute"\n    ...     return "a value"\n    >>> A.a                                   \n    <property object at 0x...>\n    >>> A().a\n    \'a value\'\n    ```\n\n    例如`A.a`是只读属性，它已经有文档了：`help(A)`包含从getter方法获取的属性`a`的文档字符串。将`a`定义为property使它能够直接被计算，并且产生只读的副作用，因为没有定义任何setter。\n  \n    为了得到setter和getter，显然需要两个方法。从Python 2.6开始首选以下语法：\n  \n    ```python\n    class Rectangle(object):\n        def __init__(self, edge):\n            self.edge = edge\n    \n        @property\n        def area(self):\n            """Computed area.\n    \n            Setting this updates the edge length to the proper value.\n            """\n            return self.edge**2\n    \n        @area.setter\n        def area(self, area):\n            self.edge = area ** 0.5\n    ```\n  \n    通过`property`装饰器取代带一个属性(property)对象的getter方法，以上代码起作用。这个对象反过来有三个可用于装饰器的方法`getter`、`setter`和`deleter`。它们的作用就是设定属性对象的getter、setter和deleter(被存储为`fget`、`fset`和`fdel`属性(attributes))。当创建对象时，getter可以像上例一样设定。当定义setter时，我们已经在`area`中有property对象，可以通过`setter`方法向它添加setter，一切都在创建类时完成。\n  \n    之后，当类实例创建后，property对象和特殊。当解释器执行属性存取、赋值或删除时，其执行被下放给property对象的方法。\n  \n    为了让一切一清二楚[^5]，让我们定义一个“调试”例子：\n  \n    ```python\n    >>> class D(object):\n    ...    @property\n    ...    def a(self):\n    ...      print "getting", 1\n    ...      return 1\n    ...    @a.setter\n    ...    def a(self, value):\n    ...      print "setting", value\n    ...    @a.deleter\n    ...    def a(self):\n    ...      print "deleting"\n    >>> D.a                                    \n    <property object at 0x...>\n    >>> D.a.fget                               \n    <function a at 0x...>\n    >>> D.a.fset                               \n    <function a at 0x...>\n    >>> D.a.fdel                               \n    <function a at 0x...>\n    >>> d = D()               # ... varies, this is not the same `a` function\n    >>> d.a\n    getting 1\n    1\n    >>> d.a = 2\n    setting 2\n    >>> del d.a\n    deleting\n    >>> d.a\n    getting 1\n    1\n    ```\n  \n    属性(property)是对装饰器语法的一点扩展。使用装饰器的一大前提——命名不重复——被违反了，但是目前没什么更好的发明。为getter，setter和deleter方法使用相同的名字还是个好的风格。\n\n一些其它更新的例子包括：\n\n- `functools.lru_cache`记忆任意维持有限 参数：结果 对的缓存函数(Python 3.2)\n- `functools.total_ordering`是一个基于单个比较方法而填充丢失的比较(ordering)方法(`__lt__`,`__gt__`，`__le__`等等)的类装饰器。\n\n### 函数的废弃\n\n比如说我们想在第一次调用我们不希望被调用的函数时在标准错误打印一个废弃函数警告。如果我们不像更改函数，我们可用装饰器\n\n```python\nclass deprecated(object):\n    """Print a deprecation warning once on first use of the function.\n\n    >>> @deprecated()                    # doctest: +SKIP\n    ... def f():\n    ...     pass\n    >>> f()                              # doctest: +SKIP\n    f is deprecated\n    """\n    def __call__(self, func):\n        self.func = func\n        self.count = 0\n        return self._wrapper\n    def _wrapper(self, *args, **kwargs):\n        self.count += 1\n        if self.count == 1:\n            print self.func.__name__, \'is deprecated\'\n        return self.func(*args, **kwargs)\n```\n\n也可以实现成函数：\n\n```python\ndef deprecated(func):\n    """Print a deprecation warning once on first use of the function.\n\n    >>> @deprecated                      # doctest: +SKIP\n    ... def f():\n    ...     pass\n    >>> f()                              # doctest: +SKIP\n    f is deprecated\n    """\n    count = [0]\n    def wrapper(*args, **kwargs):\n        count[0] += 1\n        if count[0] == 1:\n            print func.__name__, \'is deprecated\'\n        return func(*args, **kwargs)\n    return wrapper\n```\n\n### while-loop移除装饰器\n\n例如我们有个返回列表的函数，这个列表由循环创建。如果我们不知道需要多少对象，实现这个的标准方法如下：\n\n```python\ndef find_answers():\n    answers = []\n    while True:\n        ans = look_for_next_answer()\n        if ans is None:\n            break\n        answers.append(ans)\n    return answers\n```\n\n只要循环体很紧凑，这很好。一旦事情变得更复杂，正如真实的代码中发生的那样，这就很难读懂了。我们可以通过`yield`语句简化它，但之后用户不得不显式调用嗯`list(find_answers())`。\n\n我们可以创建一个为我们构建列表的装饰器：\n\n```python\ndef vectorized(generator_func):\n    def wrapper(*args, **kwargs):\n        return list(generator_func(*args, **kwargs))\n    return functools.update_wrapper(wrapper, generator_func)\n```\n\n然后函数变成这样：\n\n```python\n@vectorized\ndef find_answers():\n    while True:\n        ans = look_for_next_answer()\n        if ans is None:\n            break\n        yield ans\n```\n\n### 插件注册系统\n\n这是一个仅仅把它放进全局注册表中而不更改类的类装饰器，它属于返回被装饰对象的装饰器。\n\n```python\nclass WordProcessor(object):\n    PLUGINS = []\n    def process(self, text):\n        for plugin in self.PLUGINS:\n            text = plugin().cleanup(text)\n        return text\n\n    @classmethod\n    def plugin(cls, plugin):\n        cls.PLUGINS.append(plugin)\n\n@WordProcessor.plugin\nclass CleanMdashesExtension(object):\n    def cleanup(self, text):\n        return text.replace(\'&mdash;\', u\'\\N{em dash}\')\n```\n\n这里我们使用装饰器完成插件注册。我们通过一个名词调用装饰器而不是一个动词，因为我们用它来声明我们的类是`WordProcessor`的一个插件。`plugin`方法仅仅将类添加进插件列表。\n\n关于插件自身说下：它用真正的Unicode中的破折号符号替代HTML中的破折号。它利用[unicode literal notation](http://docs.python.org/2.7/reference/lexical_analysis.html#string-literals)通过它在unicode数据库中的名称("EM DASH")插入一个符号。如果直接插入Unicode符号，将不可能区分所插入的和源程序中的破折号。\n\n### 更多例子和参考\n\n- [PEP 310](http://www.python.org/dev/peps/pep-0318)(函数和方法装饰语法)\n- [PEP 3129](http://www.python.org/dev/peps/pep-3129)(类装饰语法)\n- [http://wiki.python.org/moin/PythonDecoratorLibrary](http://wiki.python.org/moin/PythonDecoratorLibrary)\n- [http://docs.python.org/dev/library/functools.html](http://docs.python.org/dev/library/functools.html)\n- [http://pypi.python.org/pypi/decorator](http://pypi.python.org/pypi/decorator)\n- Bruce Eckel\n  - [装饰器I](http://www.artima.com/weblogs/viewpost.jsp?thread=240808):介绍Python装饰器\n  - [Python装饰器II](http://www.artima.com/weblogs/viewpost.jsp?thread=240845)：装饰器参数\n  - [Python装饰器III](http://www.artima.com/weblogs/viewpost.jsp?thread=241209)：一个基于装饰器构建的系统\n\n## 上下文管理器\n\n上下文管理器是可以在`with`语句中使用，拥有`__enter__`和`__exit__`方法的对象。\n\n```python\nwith manager as var:\n    do_something(var)\n```\n\n相当于以下情况的简化：\n\n```python\nvar = manager.__enter__()\ntry:\n    do_something(var)\nfinally:\n    manager.__exit__()\n```\n\n换言之，[PEP 343](http://www.python.org/dev/peps/pep-0343)中定义的上下文管理器协议允许将无聊的`try...except...finally`结构抽象到一个单独的类中，仅仅留下关注的`do_something`部分。\n\n1.`__enter__`方法首先被调用。它可以返回赋给`var`的值。`as`部分是可选的：如果它不出现，`enter`的返回值简单地被忽略。\n2.`with`语句下的代码被执行。就像`try`子句，它们或者成功执行到底，或者`break`，`continue`或`return`，或者可以抛出异常。无论哪种情况，该块结束后，`__exit__`方法被调用。如果抛出异常，异常信息被传递给`__exit__`，这将在下一章节讨论。通常情况下，异常可被忽略，就像在`finally`子句中一样，并且将在`__exit__`结束后重新抛出。\n\n比如说我们想确认一个文件在完成写操作之后被立即关闭：\n\n```python\n>>> class closing(object):\n...   def __init__(self, obj):\n...     self.obj = obj\n...   def __enter__(self):\n...     return self.obj\n...   def __exit__(self, *args):\n...     self.obj.close()\n>>> with closing(open(\'/tmp/file\', \'w\')) as f:\n...   f.write(\'the contents\\n\')\n```\n\n这里我们确保了当`with`块退出时调用了`f.close()`。因为关闭文件是非常常见的操作，该支持已经出现在`file`类之中。它有一个`__exit__`方法调用`close`，并且本身可作为上下文管理器。\n\n```python\n>>> with open(\'/tmp/file\', \'a\') as f:\n...   f.write(\'more contents\\n\')\n```\n\n`try...finally`常见的用法是释放资源。各种不同的情况实现相似：在`__enter__`阶段资源被获得，在`__exit__`阶段释放，如果抛出异常也被传递。正如文件操作，往往这是对象使用后的自然操作，内置支持使之很方便。每一个版本，Python都在更多的地方提供支持。\n\n- 所有类似文件的对象：\n  - `file` ➔ 自动关闭\n  - `fileinput`,`tempfile`(py >= 3.2)\n  - `bz2.BZ2File`，`gzip.GzipFile`, `tarfile.TarFile`,`zipfile.ZipFile`\n  - `ftplib`, `nntplib` ➔ 关闭连接(py >= 3.2)\n- 锁\n  - `multiprocessing.RLock` ➔  锁定和解锁\n  - `multiprocessing.Semaphore`\n  - `memoryview` ➔ 自动释放(py >= 3.2 或 3.3)\n- `decimal.localcontext`➔  暂时更改计算精度\n- `_winreg.PyHKEY` ➔  打开和关闭Hive Key\n- `warnings.catch_warnings` ➔  暂时杀死(kill)警告\n- `contextlib.closing` ➔  如上例，调用`close`\n- 并行编程\n  - `concurrent.futures.ThreadPoolExecutor` ➔  并行调用然后杀掉线程池(py >= 3.2)\n  - `concurrent.futures.ProcessPoolExecutor` ➔  并行调用并杀死进程池(py >= 3.2)\n  - `nogil` ➔  暂时解决GIL问题(仅仅cyphon ：（)\n\n### 捕获异常\n\n当一个异常在`with`块中抛出时，它作为参数传递给`__exit__`。三个参数被使用，和`sys.exc_info()`返回的相同：类型、值和回溯(traceback)。当没有异常抛出时，三个参数都是`None`。上下文管理器可以通过从`__exit__`返回一个真(True)值来“吞下”异常。例外可以轻易忽略，因为如果`__exit__`不使用`return`直接结束，返回`None`——一个假(False)值，之后在`__exit__`结束后重新抛出。\n\n捕获异常的能力创造了有意思的可能性。一个来自单元测试的经典例子——我们想确保一些代码抛出正确种类的异常：\n\n```python\nclass assert_raises(object):\n    # based on pytest and unittest.TestCase\n    def __init__(self, type):\n        self.type = type\n    def __enter__(self):\n        pass\n    def __exit__(self, type, value, traceback):\n        if type is None:\n            raise AssertionError(\'exception expected\')\n        if issubclass(type, self.type):\n            return True # swallow the expected exception\n        raise AssertionError(\'wrong exception type\')\n\nwith assert_raises(KeyError):\n    {}[\'foo\']\n```\n\n### 使用生成器定义上下文管理器\n\n当讨论生成器时，据说我们相比实现为类的迭代器更倾向于生成器，因为它们更短小方便，状态被局部保存而非实例和变量中。另一方面，正如双向通信章节描述的那样，生成器和它的调用者之间的数据流可以是双向的。包括异常，可以直接传递给生成器。我们想将上下文管理器实现为特殊的生成器函数。事实上，生成器协议被设计成支持这个用例。\n\n```python\n@contextlib.contextmanager\ndef some_generator(<arguments>):\n    <setup>\n    try:\n        yield <value>\n    finally:\n        <cleanup>\n```\n\n`contextlib.contextmanager`装饰一个生成器并转换为上下文管理器。生成器必须遵循一些被包装(wrapper)函数强制执行的法则——最重要的是它至少`yield`一次。`yield`之前的部分从`__enter__`执行，上下文管理器中的代码块当生成器停在`yield`时执行，剩下的在`__exit__`中执行。如果异常被抛出，解释器通过`__exit__`的参数将之传递给包装函数，包装函数于是在yield语句处抛出异常。通过使用生成器，上下文管理器变得更短小精炼。\n\n让我们用生成器重写`closing`的例子：\n\n```python\n@contextlib.contextmanager\ndef closing(obj):\n    try:\n        yield obj\n    finally:\n        obj.close()\n```\n\n再把`assert_raises`改写成生成器：\n\n```python\n@contextlib.contextmanager\ndef assert_raises(type):\n    try:\n        yield\n    except type:\n        return\n    except Exception as value:\n        raise AssertionError(\'wrong exception type\')\n    else:\n        raise AssertionError(\'exception expected\')\n```\n\n这里我们用装饰器将生成函数转化为上下文管理器！\n\n---\n\n## FootNotes\n\n[^1]:就像CPU工作一样，中断时保存断点，最后又恢复。\n[^2]:好吧它已经发布了= =，虽然在大多linux发行版中还是2.x和3.2。\n[^3]:看糊涂了吧，我也糊涂了……\n[^4]:[装饰器和函数式编程](http://youngsterxyf.github.com/2013/01/04/Decorators-and-Functional-Python/)值得一看。\n[^5]:云里雾里= =\n',metaData:{layout:"post",title:"Advanced Python Constructs(译)",excerpt:"翻译自scipy lecture notes，又手贱翻译东西了= =，虽然一如既往的渣……",category:"python",tags:["python","scipy-lecture-notes"],disqus:!0}}}});
//# sourceMappingURL=96.3b42672f4fd41a2a1242.js.map