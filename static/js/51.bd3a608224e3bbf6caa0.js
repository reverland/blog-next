webpackJsonp([51,194],{578:function(n,e){n.exports={rawContent:'\n\n图层模式和色彩空间理论，在寒假的时候就很好奇，找来gimp的文档看了看图层模式还是有些糊里糊涂。关于色彩理论，看到图像处理新闻组(好像很古老的东西了)上推荐这篇文章[Color FAQ](http://www.poynton.com/ColorFAQ.html)，看上去似乎很不错的样子，但好像不适合入门。\n\n后来看到一本1996年关于gimp的书[Grokking the GIMP](http://gimp-savvy.com/BOOK/index.html?node52.html)，虽然似乎有些古老的样子，但一目了然，很多东西，十年都未曾变化。\n\n## 色彩基础\n\n### RGB空间\n\n即通过Red、Green、Blue来表示其它颜色的方法。每种颜色都取0-255之间的值。这样整个色彩空间可以表示在R、G、B为轴的立方体内。\n\n一般看来，越往对角线方向色彩感觉越亮。\n\n### HSV空间\n\n这里有几个定义：\n\nlightness：L = (MAX(R, G, B) + MIN(R, G, B))/2\nvalue: V = MAX(R, G, B)\nluminance: Y = 0.30R + 0.69G + 0.11B\nbrightness: (R + G + B)/3\n\nluminance更符合人的主观亮度感受。brightness和人的感受差别较大，一般不用而用luminance。\n\n那HSV模型在RGB空间是什么样的呢。\n\n### HSV和RGB关系\n\n在RGB空间所在的立方体中，主对角线被成为Neutral line。这条线从原点到(255,255,255)逐渐从黑色过度到灰色到更浅的灰色到白色。\n\nHSV中固定H，则获得过这条线的一面。固定S，则获得以此为轴原点为顶点的圆锥面。固定V，则获得关于此线垂直的面。\n\n### CMYK减法模型\n\n这是印刷中常用的，RGB用在发光模型中，CMY(K)用在反光模型中。k应该不超过MAX(C, M, Y)\n\n### 转换为灰度图像\n\n有三种方法：\n\n1. Grayscale: 通过计算luminance，这个符合人眼对亮度的感觉\n2. Desaturate: 计算lightness。实际上保留了RGB分量\n3. Decompose HSV:抽取HSV中的V\n\nV > L或Y，所以显然V最亮，但人眼会感觉Grayscale效果最好。所以后两种方法常用在分离图像上。\n\n## 图层模式\n\n这是关于两个或多个图层的故事，上面的记为F，下面的记为B\n\n### Normal, Dissolve, Behind模式\n\nNormal没啥特别的，溶解和F图层的透明度有关，透明度越大，B透过的越多。\n\nbehind是个特殊的画笔才能用的模式，就像在玻璃背面画图一样\n\n### Addition，Substract， Difference模式\n\n运算符号表示各个分量独立运算。W为白色\n\n加法：\n    R = min(F + B, W)\n\n减法：\n    R = max(B - F, 0)\n\n差分：\n    R = |F - B|\n\n前两种方法可能会造车个部分额区域变得全白或全黑，丢失部分信息。\n\n### multiply(burn), Divide(Dodge), Screen, Overlay模式\n\n发现变化也不少，现在又是hard light又是啥的，burn也不是multiply，Divide也不是Dodge了。不过也差不多，burn和dodge只是把相应multiply和divide的F反色了(255-F)\n\n正片叠底：\n    R = (F x B)/255\n\n得到的结果比F和B都暗\n\n除法：\n    R = MIN(W, B x 256 / (F + 1))\n\n结果比B亮，有可能变白丢失信息\n\n滤色：\n    R = 255 - 1/255 x (255- F) x (255 - B)\n\n滤色原理和乘法类似，只是是从W开始向原点计算。结果是图像所有地方都变亮，但并不会出现某些区域全变白色丢失信息。\n\n叠加(不过gimp中的叠加好像就是柔光, [这里看起来让人困惑](https://bugzilla.gnome.org/show_bug.cgi?id=162395))：\n    multiply和screen的结合：\n    R = 1/255 x (B x R_S + (255 - B) X R_m)\n\n如果先面的图层B很深，就以multiply为主，相反如果B很亮，则以screen为主。结果就是暗的地方更暗，亮的地方更亮。\n\n### Darken Only 和 Lighten Only模式\n\n变暗：\n    R = MIN(F, B)\n\n变亮：\n    R = MAX(F, B)\n\n### Hue, Saturation, Value, Color模式\n\n色调：\n    R = [h(F), s(B), v(B)]\n\n取前景的色调\n\nValue和Saturation类似。\n\nColor：\n    R = [h(F), s(F), l(B)]\n\n使用背景的lightness，一般lightness都比value小些\n\n\n最后，这里头什么乱七八糟的历史问题，还是这比较清楚：[图层混合模式详解](http://www.pegtop.net/delphi/articles/blendmodes/)\n\n## 其它\n\n最后，完全被北邮求职氛围吓尿拉！！！！！！！！！！！\n\n惶恐万分，心情只能用下面的图形容\n\n![惶恐万分图](/images/ancious.jpg "希望手绘反映内心")\n\n还有时间这样没事画棵树么？\n\n![树](/images/work-gimp3.jpg "我的第一个上色唉")\n\n不管怎样，毕业之前有几件特别想做的事：\n\n1. 以工作室的名义发布一款自任美工、编剧、程序员等balblabla使用phaser.js制作的“网页游戏”\n2. 画给某些人的画\n3. 去游泳馆洗三百次澡= =。。。。。。\n\nas酱上回来找我玩错过了好遗憾，as酱T T，下次你有空不知啥时候了。\n\n最后奉上工作室logo：\n\n![半条狗工作室](/images/work-gimp5.jpg "半条狗logo")\n\n欢迎各位一起来玩耍。一起来做ARPG啊！\n\n最后丧心病狂大量图片哈哈哈哈\n\n在aus的推荐下迷上了像素画\n\n![像素狗，半条狗](/images/work-gimp4.jpg "一条大狗")]\n\n![anubis](/images/work-gimp2.jpg "anubis")\n\n在[gimpusers](http://www.gimpusers.com)上看到了很多很棒的教程！\n\n![chrome环](/images/work-gimp.jpg "chrome")]\n\n![火焰效果](/images/work-gimp1.jpg "fire")\n\n![flashy car](/images/work-gimp6.jpg "flashy car")\n\n![animated radar](/images/animated-radar.gif "动画雷达")\n',metaData:{layout:"post",title:"谈谈色彩空间和混合模式",excerpt:"好奇了好久的色彩空间和混合模式终于看懂了",category:"art",tags:["art"],disqus:!0}}}});