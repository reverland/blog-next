webpackJsonp([121,177],{302:function(n,e){n.exports={rawContent:"\n\n# Scikit Learn: 在python中机器学习\n\n<div markdown=\"1\">\n***Warning***\n\n警告：渣翻译，很多我自己都没看懂.但我会慢慢看慢慢修改，此文档维护中……\n\n</div>\n{:.alert .alert-danger}\n\n翻译自：[Scikit Learn:Machine Learning in Python](http://scipy-lectures.github.com/advanced/scikit-learn/index.html)\n\n作者:\tFabian Pedregosa, Gael Varoquaux\n\n**先决条件**\n\n- Numpy, Scipy\n- IPython\n- matplotlib\n- [scikit-learn](http://scikit-learn.org)\n\n---\n\n**目录**\n\n* toc\n{: toc }\n\n---\n> 警告：在0.9版中(2011年9月发行)，scikit-learn的导入路径从`scikits.learn`更改为`sklearn`\n\n## 载入示例数据\n\n首先我们载入一些用来玩耍的数据。我们将使用的数据是非常简单的著名的花朵数据——安德森鸢尾花卉数据集。\n\n我们有一百五十个鸢尾花的一些尺寸的观测值：萼片长度、宽度，花瓣长度和宽度。还有它们的亚属：山鸢尾（Iris setosa）、变色鸢尾（Iris versicolor）和维吉尼亚鸢尾（Iris virginica）\n\n向python对象载入数据：\n\n    In [1]: from sklearn import datasets\n    In [2]: iris = datasets.load_iris()\n\n数据存储在`.data`项中，是一个`(n_samples, n_features)`数组。\n\n    In [3]: iris.data.shape\n    Out[3]: (150, 4)\n    \n每个观察对象的种类存贮在数据集的`.target`属性中。这是一个长度为`n_samples`的整数一维数组:\n\n    In [5]: iris.target.shape\n    Out[5]: (150,)\n    \n    In [6]: import numpy as np\n    \n    In [7]: np.unique(iris.target)\n    Out[7]: array([0, 1, 2])\n    \n#### 一个改变数据集大小的示例：数码数据集(digits datasets)\n\n数码数据集[^1]包括1797个图像，每一个都是个代表手写数字的8x8像素图像\n\n    In [8]: digits = datasets.load_digits()\n    \n    In [9]: digits.images.shape\n    Out[9]: (1797, 8, 8)\n    \n    In [10]: import pylab as pl\n    \n    In [11]: pl.imshow(digits.images[0], cmap=pl.cm.gray_r) \n    Out[11]: <matplotlib.image.AxesImage at 0x3285b90>\n    \n    In [13]: pl.show()\n\n为了在scikit中使用这个数据集，我们把每个8x8图像转换成长度为64的矢量。(译者注：或者直接用`digits.data`)\n\n    In [12]: data = digits.images.reshape((digits.images.shape[0], -1))\n\n### 学习和预测\n\n现在我们已经获得一些数据，我们想要从中学习和预测一个新的数据。在`scikit-learn`中，我们通过创建一个`估计器(estimator)`从已经存在的数据学习，并且调用它的`fit(X,Y)`方法。\n\n    In [14]: from sklearn import svm\n    \n    In [15]: clf = svm.LinearSVC()\n    \n    In [16]: clf.fit(iris.data, iris.target) # learn from the data \n    Out[16]: \n    LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,\n         intercept_scaling=1, loss='l2', multi_class='ovr', penalty='l2',\n         tol=0.0001, verbose=0)\n    \n一旦我们已经从数据学习，我们可以使用我们的模型来预测未观测数据最可能的结果。\n\n    In [17]: clf.predict([[ 5.0,  3.6,  1.3,  0.25]])\n    Out[17]: array([0], dtype=int32)\n\n**注意：**我们可以通过它以下划线结束的属性存取模型的参数：\n\n    In [18]: clf.coef_  \n    Out[18]: \n    array([[ 0.18424352,  0.45122644, -0.8079467 , -0.45071302],\n           [ 0.05190619, -0.89423619,  0.40519245, -0.93781587],\n           [-0.85087844, -0.98667529,  1.38088883,  1.86538111]])\n\n## 分类\n\n### K最近邻(KNN)分类器\n\n最简单的可能的分类器是最近邻：给定一个新的观测值，将n维空间中最靠近它的训练样本标签给它。其中n是每个样本中特性(features)数。\n\nk最近邻[^2]分类器内部使用基于球树(ball tree)[^3]来代表它训练的样本。\n\n**KNN分类示例**：\n\n    In [19]: # Create and fit a nearest-neighbor classifier\n    \n    In [20]: from sklearn import neighbors\n    \n    In [21]: knn = neighbors.KNeighborsClassifier()\n    \n    In [22]: knn.fit(iris.data, iris.target) \n    Out[22]: \n    KNeighborsClassifier(algorithm='auto', leaf_size=30, n_neighbors=5, p=2,\n               warn_on_equidistant=True, weights='uniform')\n    \n    In [23]: knn.predict([[0.1, 0.2, 0.3, 0.4]])\n    Out[23]: array([0])\n\n#### 训练集和测试集\n\n当验证学习算法时，不要用一个用来拟合估计器的数据来验证估计器的预测非常重要。确实，通过kNN估计器，我们将总是获得关于训练集完美的预测。\n\n    In [24]: perm = np.random.permutation(iris.target.size)\n    \n    In [25]: iris.data = iris.data[perm]\n    \n    In [26]: iris.target = iris.target[perm]\n    \n    In [27]: knn.fit(iris.data[:100], iris.target[:100]) \n    Out[27]: \n    KNeighborsClassifier(algorithm='auto', leaf_size=30, n_neighbors=5, p=2,\n               warn_on_equidistant=True, weights='uniform')\n    \n    In [28]: knn.score(iris.data[100:], iris.target[100:]) \n    /usr/lib/python2.7/site-packages/sklearn/neighbors/classification.py:129: NeighborsWarning: kneighbors: neighbor k+1 and neighbor k have the same distance: results will be dependent on data order.\n      neigh_dist, neigh_ind = self.kneighbors(X)\n    Out[28]: 0.95999999999999996\n\nBonus的问题：为什么我们使用随机的排列？\n\n### 分类支持向量机(SVMs)\n\n#### 线性支持向量机\n\nSVMs[^4]尝试构建一个两个类别的最大间隔超平面。它选择输入的子集，调用支持向量即离分离的超平面最近的样本点。\n\n    In [60]: from sklearn import svm\n    \n    In [61]: svc = svm.SVC(kernel='linear')\n    \n    In [62]: svc.fit(iris.data, iris.target)\n    Out[62]: \n    SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,\n      kernel='linear', probability=False, shrinking=True, tol=0.001,\n      verbose=False)\n    \n`scikit-learn`中有好几种支持向量机实现。最普遍使用的是`svm.SVC`，`svm.NuSVC`和`svm.LinearSVC`;“SVC”代表支持向量分类器(Support Vector Classifier)(也存在回归SVMs，在`scikit-learn`中叫作“SVR”)。\n\n**练习**\n\n训练一个数字数据集的`svm.SVC`。省略最后10%并且检验观测值的预测表现。\n\n#### 使用核\n\n类别不总是可以用超平面分离，所以人们指望有些可能是多项式或指数实例的非线性决策函数：\n\n- 线性核\n\n        svc = svm.SVC(kernel='linear')\n\n- 多项式核\n\n        svc = svm.SVC(kernel='poly',\n        ...               degree=3)\n        # degree: polynomial degree\n\n- RBF核(径向基函数)[^5]\n\n         svc = svm.SVC(kernel='rbf')\n         # gamma: inverse of size of\n         # radial kernel\n\n**练习**\n\n以上提到的哪些核对数字数据集有更好的预测性能？(译者：前两个)\n\n## 聚类：将观测值聚合\n\n给定鸢尾花数据集，如果我们知道这有三种鸢尾花，但是无法得到它们的标签，我们可以尝试*非监督学习*：我们可以通过某些标准*聚类*观测值到几个组别里。\n\n### k均值聚类\n\n最简答的聚类算法是k均值算法。这将一个数据分成k个集群，以最小化观测值(n维空间中)到聚类中心的均值来分配每个观测点到集群;然后均值重新被计算。这个操作递归运行直到聚类收敛，在`max_iter`回合内到最大值。[^7]\n\n(一个替代的k均值算法实现在scipy中的`cluster`包中。这个`scikit-learn`实现与之不同，通过提供对象API和几个额外的特性，包括智能初始化。)\n\n\n    In [82]: from sklearn import cluster, datasets\n    \n    In [83]: iris = datasets.load_iris()\n    \n    In [84]: k_means = cluster.KMeans(k=3)\n    \n    In [85]: k_means.fit(iris.data) \n    Out[85]: \n    KMeans(copy_x=True, init='k-means++', k=3, max_iter=300, n_init=10, n_jobs=1,\n        precompute_distances=True,\n        random_state=<mtrand.RandomState object at 0x7f4d860642d0>, tol=0.0001,\n        verbose=0)\n    \n    In [86]: print k_means.labels_[::10]\n    [1 1 1 1 1 2 2 2 2 2 0 0 0 0 0]\n    \n    In [87]: print iris.target[::10]\n    [0 0 0 0 0 1 1 1 1 1 2 2 2 2 2]\n\n#### 应用到图像压缩\n\n译者注：Lena是经典的图像处理实例图像, 8位灰度色深, 尺寸512 x 512\n\n聚类可以被看作是一种从信息中选择一小部分观测值。例如，这个可以被用来海报化一个图像(将连续变化的色调转换成更少几个色调)：\n\n    In [95]: from scipy import misc\n    \n    In [96]: lena = misc.lena().astype(np.float32)\n    \n    In [97]: X = lena.reshape((-1, 1)) # We need an (n_sample, n_feature) array\n    \n    In [98]: k_means = cluster.KMeans(5)\n    \n    In [99]: k_means.fit(X)\n    Out[99]: \n    KMeans(copy_x=True, init='k-means++', k=5, max_iter=300, n_init=10, n_jobs=1,\n        precompute_distances=True,\n        random_state=<mtrand.RandomState object at 0x7f4d860642d0>, tol=0.0001,\n        verbose=0)\n    \n    In [100]: values = k_means.cluster_centers_.squeeze()\n    \n    In [101]: labels = k_means.labels_\n    \n    In [102]: lena_compressed = np.choose(labels, values)\n    \n    In [103]: lena_compressed.shape = lena.shape\n\n译者注：想看效果？\n\n    In [31]: import matplotlib.pyplot as plt\n    \n    In [32]: plt.gray()\n    \n    In [33]: plt.imshow(lena_compressed)\n    Out[33]: <matplotlib.image.AxesImage at 0x4b2c510>\n    \n    In [34]: plt.show()\n\n原图类似。\n\n![Image]\n\n## 用主成分分析降维\n\n以上根据观测值标记的点云在一个方向非常平坦，所以一个特性几乎可以用其它两个确切地计算。PCA发现哪个方向的数据不是平的并且它可以通过在一个子空间投影来降维。\n\n**警告：**PCA将在模块`decomposition`或`pca`中，这取决于你scikit-learn的版本。\n\n    In [75]: from sklearn import decomposition\n    \n    In [76]: pca = decomposition.PCA(n_components=2)\n    \n    In [77]: pca.fit(iris.data)\n    Out[77]: PCA(copy=True, n_components=2, whiten=False)\n    \n    In [78]: X = pca.transform(iris.data)\n\n现在我们可以可视化(降维过的)鸢尾花数据集：\n\n    In [79]: import pylab as pl\n    \n    In [80]: pl.scatter(X[:, 0], X[:, 1], c=iris.target)\n    Out[80]: <matplotlib.collections.PathCollection at 0x4104310>\n\nPCA不仅在可视化高维数据集时非常有用。它可以用来作为帮助加速对高维数据不那么有效率的监督方法[^6]的预处理步骤。\n\n## 将一切放在一起：人脸识别\n\n一个实例使用主成分分析来降维和支持向量机来分类进行人脸识别。\n\n译者注：让程序自动下载(确保联网，文件较大，要等待很久)或者手动下载[数据](http://vis-www.cs.umass.edu/lfw/lfw-funneled.tgz)并放到`./scikit_learn_data/lfw_home/`下。\n\n    \"\"\"\n    Stripped-down version of the face recognition example by Olivier Grisel\n    \n    http://scikit-learn.org/dev/auto_examples/applications/face_recognition.html\n    \n    ## original shape of images: 50, 37\n    \"\"\"\n    import numpy as np\n    import pylab as pl\n    from sklearn import cross_validation, datasets, decomposition, svm\n    \n    # ..\n    # .. load data ..\n    lfw_people = datasets.fetch_lfw_people(min_faces_per_person=70, resize=0.4)\n    perm = np.random.permutation(lfw_people.target.size)\n    lfw_people.data = lfw_people.data[perm]\n    lfw_people.target = lfw_people.target[perm]\n    faces = np.reshape(lfw_people.data, (lfw_people.target.shape[0], -1))\n    train, test = iter(cross_validation.StratifiedKFold(lfw_people.target, k=4)).next()\n    X_train, X_test = faces[train], faces[test]\n    y_train, y_test = lfw_people.target[train], lfw_people.target[test]\n    \n    # ..\n    # .. dimension reduction ..\n    pca = decomposition.RandomizedPCA(n_components=150, whiten=True)\n    pca.fit(X_train)\n    X_train_pca = pca.transform(X_train)\n    X_test_pca = pca.transform(X_test)\n    \n    # ..\n    # .. classification ..\n    clf = svm.SVC(C=5., gamma=0.001)\n    clf.fit(X_train_pca, y_train)\n    \n    # ..\n    # .. predict on new images ..\n    for i in range(10):\n        print lfw_people.target_names[clf.predict(X_test_pca[i])[0]]\n        _ = pl.imshow(X_test[i].reshape(50, 37), cmap=pl.cm.gray)\n        _ = raw_input()\n\n全部代码：[face.py](http://scipy-lectures.github.com/_downloads/faces.py)\n\n## 线性模型：从回归到稀疏\n\n**糖尿病数据集**\n\n糖尿病数据集包含442个病人的测量而得的10项生理指标(年龄，性别，体重，血压)，和一年后疾病进展的指示：\n\n    In [104]: diabetes = datasets.load_diabetes()\n    \n    In [105]: diabetes_X_train = diabetes.data[:-20]\n    \n    In [106]: diabetes_X_test  = diabetes.data[-20:]\n    \n    In [107]: diabetes_y_train = diabetes.target[:-20]\n    \n    In [108]: diabetes_y_test  = diabetes.target[-20:]\n\n这个手头的任务是用来从生理指标预测疾病。\n\n### 稀疏模型\n\n为了改善问题的条件(无信息变量，减少维度的不利影响，作为一个特性(feature)选择的预处理，等等)，我们只关注有信息的特性将没有信息的特性设置为0.这个罚则函数法[^8],叫作*套索(Lasso)*[^9]，可以将一些系数设置为0.这些方法叫作*稀疏方法(sparse method)*，稀疏化可以被视作奥卡姆剃刀：相对于复杂模型更倾向于简单的。\n\n    In [109]: from sklearn import linear_model\n    \n    In [110]: regr = linear_model.Lasso(alpha=.3)\n    \n    In [111]: regr.fit(diabetes_X_train, diabetes_y_train)\n    Out[111]: \n    Lasso(alpha=0.3, copy_X=True, fit_intercept=True, max_iter=1000,\n       normalize=False, positive=False, precompute='auto', tol=0.0001,\n       warm_start=False)\n    \n    In [112]: regr.coef_ # very sparse coefficients\n    Out[112]: \n    array([   0.        ,   -0.        ,  497.34075682,  199.17441034,\n             -0.        ,   -0.        , -118.89291545,    0.        ,\n            430.9379595 ,    0.        ])\n    \n    In [113]: regr.score(diabetes_X_test, diabetes_y_test) \n    Out[113]: 0.55108354530029791\n\n这个分数和线性回归(最小二乘法)非常相似：\n\n    In [114]: lin = linear_model.LinearRegression()\n    \n    In [115]: lin.fit(diabetes_X_train, diabetes_y_train) \n    Out[115]: LinearRegression(copy_X=True, fit_intercept=True, normalize=False)\n    \n    In [116]: lin.score(diabetes_X_test, diabetes_y_test) \n    Out[116]: 0.58507530226905713\n    \n#### 同一问题的不同算法\n\n同一数学问题可以用不同算法解决。例如,sklearn中的*Lasso*对象使用坐标下降(coordinate descent)方法[^10]解决套索回归，这在大数据集时非常有效率。然而，sklearn也提供了*LassoLARS*对象，使用LARS这种在解决权重向量估计非常稀疏，观测值很少的问题很有效率的方法。\n\n## 模型选择：选择估计器和它们的参数\n\n### 格点搜索和交叉验证估计器\n\n#### 格点搜索\n\nscikit-learn提供了一个对象，该对象给定数据，在拟合一个参数网格的估计器时计算分数，并且选择参数最大化交叉验证分数。这个对象在构建时采用一个估计器并且暴露一个估计器API：\n\n    In [117]: from sklearn import svm, grid_search\n    \n    In [118]: gammas = np.logspace(-6, -1, 10)\n    \n    In [119]: svc = svm.SVC()\n    \n    In [120]: clf = grid_search.GridSearchCV(estimator=svc, param_grid=dict(gamma=gammas),n_jobs=-1)\n    \n    In [121]: clf.fit(digits.data[:1000], digits.target[:1000]) \n    Out[121]: \n    GridSearchCV(cv=None,\n           estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,\n      kernel='rbf', probability=False, shrinking=True, tol=0.001,\n      verbose=False),\n           fit_params={}, iid=True, loss_func=None, n_jobs=-1,\n           param_grid={'gamma': array([  1.00000e-06,   3.59381e-06,   1.29155e-05,   4.64159e-05,\n             1.66810e-04,   5.99484e-04,   2.15443e-03,   7.74264e-03,\n             2.78256e-02,   1.00000e-01])},\n           pre_dispatch='2*n_jobs', refit=True, score_func=None, verbose=0)\n    \n    In [122]: clf.best_score\n    /usr/lib/python2.7/site-packages/sklearn/utils/__init__.py:79: DeprecationWarning: Function best_score is deprecated; GridSearchCV.best_score is deprecated and will be removed in version 0.12. Please use ``GridSearchCV.best_score_`` instead.\n      warnings.warn(msg, category=DeprecationWarning)\n    Out[122]: 0.98600097103091122\n    \n    In [123]: clf.best_estimator.gamma\n    /usr/lib/python2.7/site-packages/sklearn/utils/__init__.py:79: DeprecationWarning: Function best_estimator is deprecated; GridSearchCV.best_estimator is deprecated and will be removed in version 0.12. Please use ``GridSearchCV.best_estimator_`` instead.\n      warnings.warn(msg, category=DeprecationWarning)\n    Out[123]: 0.0021544346900318843\n\n默认`GridSearchCV`使用三次(3-fold)交叉验证。然而，如果它探测到一个分类器被传递，而不是一个回归量，它使用分层的3次。\n\n#### 交叉验证估计器\n\n交叉验证在一个algorithm by algorithm基础上可以更有效地设定参数。这就是为何，对给定的估计器，scikit-learn使用“CV”估计器，通过交叉验证自动设定参数。\n\n    In [125]: from sklearn import linear_model, datasets\n    \n    In [126]: lasso = linear_model.LassoCV()\n    \n    In [127]: diabetes = datasets.load_diabetes()\n    \n    In [128]: X_diabetes = diabetes.data\n    \n    In [129]: y_diabetes = diabetes.target\n    \n    In [130]: lasso.fit(X_diabetes, y_diabetes)\n    Out[130]: \n    LassoCV(alphas=array([ 2.14804,  2.00327, ...,  0.0023 ,  0.00215]),\n        copy_X=True, cv=None, eps=0.001, fit_intercept=True, max_iter=1000,\n        n_alphas=100, normalize=False, precompute='auto', tol=0.0001,\n        verbose=False)\n    \n    In [131]: # The estimator chose automatically its lambda:\n    \n    In [132]: lasso.alpha \n    Out[132]: 0.013180196198701137\n\n这些估计器是相似的，以‘CV’为它们名字的后缀。\n\n**练习**\n\n对糖尿病数据集，找到最优的正则化参数alpha。(0.016249161908773888)\n\n---\n\n## Footnotes\n\n[^1]:[什么手写数字数据集](http://scikit-learn.org/0.11/auto_examples/datasets/plot_digits_last_image.html)\n[^2]:[KNN分类算法](http://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm)\n[^3]:[Ball tree数据结构](http://en.wikipedia.org/wiki/Ball_tree)\n[^4]:[支持向量机](http://zh.wikipedia.org/wiki/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA)\n[^5]:[径向基函数](http://en.wikipedia.org/wiki/Radial_basis_function)\n[^6]:[监督学习](http://en.wikipedia.org/wiki/Supervised_learning)\n[^7]:[看看wikipedia吧](http://en.wikipedia.org/wiki/K-means_clustering)\n[^8]:[Penalty methods](http://en.wikipedia.org/wiki/Penalty_method)\n[^9]:[LASSO method](http://en.wikipedia.org/wiki/Least_squares#LASSO_method)\n[^10]:[Coordinate descent](http://en.wikipedia.org/wiki/Coordinate_descent)\n",metaData:{layout:"post",title:"Scikit Learn: 在python中机器学习",excerpt:"scipy lecture notes part last",category:"python",tags:["scikit-learn","python"],disqus:!0}}}});