webpackJsonp([60,178],{365:function(n,t){n.exports={rawContent:"\n\n这几天，嗯，跟着[Dashing D3.js](https://www.dashingd3js.com/)把传说中的D3.js入了个门。\n\nD3在创建基于浏览器的动态数据可视化并带交互真是方便。\n\n## 从一无所知到数据绑定\n\n### 为何数据可视化\n\n- 一图胜千言，图形是直观的。\n- 图形是简洁明了的表达方式\n- 世界的数据量是巨大的，图形是好的分析和展示方式\n- 数据是新的石油\n\n### 为何选择D3.js\n\n- D3.js 是基于数据操作文档的JavaScript库。D3帮助你使用HTML，SVG和CSS生动地展现数据。D3不需要你使用某个特定的框架，它的重点在于对主流浏览器的兼容，同时结合了强大的虚拟化组件，以数据驱动的方式去操作DOM。\n- D3.js由Mike Bostock基于他在斯坦福可视化小组的工作开发，现由其所在的纽约时报赞助。很多贡献者参与到项目的开发，你可以在github上找到这个项目。\n- D3.js是指Data Driven Documents。当你的网页想要和数据进行交互时，D3是个好的选择。\n- D3.js被应用到web应用的前端，即用户交互部分。\n\n### 数据可视化流程\n\nBen Fry数据可视化流程：\n\n- 获取\n- 解析\n- 过滤\n- 挖掘\n- 呈现\n- 提炼\n- 交互\n\n### 基本构建模块\n\n- 现代浏览器\n- HTML\n- CSS\n- Javascript\n- DOM\n- SVG\n- Web Inspector\n\n### D3第一步\n\n- 在HTML文件中引用云端或本地js库\n- 在Web Inspector控制台中测试\n\n### 添加DOM元素\n\n- `select`\n- `append`\n\n### 添加SVG元素\n\n- js的分行特性\n- `style`操作符\n- 链式语法\n- `select`可以被保存赋值\n\n### 将数据绑定到DOM元素上\n\n- `selectAll`\n- `data`操作符\n- 虚选择--[Thinking with Joins](http://bost.ocks.org/mike/join/)\n- `enter`/`exit`/update\n- 对虚选择的`append`\n- `text`操作符\n- 数据在`__data__`属性中\n\n### 使用在DOM元素中的数据\n\n- 向D3.js操作符参数传递函数，\n- 函数第一个参数是`__data__`内容。\n\n## 使用数据来可视化\n\n### 基于数据创建SVG元素\n\n- 创建SVG容器\n- 创建形状元素，比如`circle`\n- 将数据绑定到形状元素(基本靠虚选择完成)\n- 使用`style`利用数据修饰SVG元素\n\n### 使用SVG坐标空间\n\n- 一图胜千言：\n\n    ----------------------> x\n    | o\n    |\n    |\n    |\n    |\n    |\n    |\n    |\n    |\n    v y\n\n- `append('svg')`作为坐标空间\n- 在SVG坐标空间内放置SVG元素。`attr`\n- 创建SVG元素放置SVG元素\n- 将数据绑定到SVG元素上\n- 利用绑定的数据改变SVG元素的位置\n- 使用绑定的数据修饰SVG元素\n\n### D3.js接受的数据结构\n\n- `select`到的是数组\n- D3可以加载外部资源，好多种类\n- JSON(key一定是字符串)\n- JSON数组\n\n### 使用D3.js简化代码\n\n- 将JSON对象绑定到`__data__`属性上\n- 使用绑定的JSON对象变更SVG元素\n\n### SVG基本形和D3.js\n\n流程固定，设置svg容器，绑定数据，append形状元素，设置必要属性和样式。\n\n- circle\n- rect\n- ellipse\n- line\n- polyline/polygon\n\n### SVG Path和D3.js\n\n- 一个用来画画的SVG内置语言\n- 使用D3.js生成形状元素绘制程序(D3.js Path 数据生成器)\n\n### 动态SVG坐标空间\n\n论如何通过遍历所有数据找到图像边界。\n\n### D3.js缩放\n\n将某个Domain映射到一个Range上的对象/类/函数。\n\n- `d3.scale.linear.domain([1,100]).range([0,1])`\n- `d3.max`\n- `d3.min`\n- 还有些其它量化的和非量化的缩放。\n\n### SVG Group元素和D3.js\n\n- 可嵌套的`<g>`用来分组\n- `transform`属性和从右到左执行各种tranforming(matrix/translate/scale/skewX/skewY)\n- transform的转换是相对空间坐标的转换\n- 使用D3.js来分组SVG元素(`append`)\n- 使用D3.js来转换SVG元素(`attr`)\n\n### SVG Text 元素\n\n- `text`标签及属性, 比如`text-anchor`属性\n- 使用D3.js创建Text元素，绑定数据，使用数据。\n\n### SVG坐标轴元素\n\n- D3的坐标轴组件，包括水平与竖直坐标轴线、刻度、合适的分隔空间等等。\n- 坐标轴可以更清晰展现变量大小和关系\n- 坐标轴的范围，是否反转、类型、单位等\n- 生成D3.js坐标轴函数(`d3.svg.axis().scale($SCALE)`)\n- 调用坐标轴函数(`var xAxisGroup = svgContainer.append(\"g\").call($FUNCTION);`)生成坐标轴元素组。\n- 最后创建坐标轴(最上层)\n\n然后忽然没了？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？\n\n准备继续看[Scott Murray的D3.js教程](http://alignedleft.com/tutorials/d3/)\n\n\n",metaData:{layout:"post",title:"A Glance at D3.js",excerpt:"d3学习笔记",category:"javascript",tags:["d3","visualization"],disqus:!0}}}});